/**
 * Stage Driving API
 * API specifications
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { LikeDTO } from '../model/likeDTO';
import { StgdrvResponseDTO } from '../model/stgdrvResponseDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LikesService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add new like action
     * Add new like action.
     * @param body 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLike(body: LikeDTO, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StgdrvResponseDTO>;
    public createLike(body: LikeDTO, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StgdrvResponseDTO>>;
    public createLike(body: LikeDTO, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StgdrvResponseDTO>>;
    public createLike(body: LikeDTO, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createLike.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createLike.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<StgdrvResponseDTO>(`${this.basePath}/v1/likes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new like action
     * Add new like action.
     * @param body 
     * @param eventId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLike1(body: LikeDTO, eventId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StgdrvResponseDTO>;
    public createLike1(body: LikeDTO, eventId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StgdrvResponseDTO>>;
    public createLike1(body: LikeDTO, eventId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StgdrvResponseDTO>>;
    public createLike1(body: LikeDTO, eventId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createLike1.');
        }
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling createLike1.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createLike1.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<StgdrvResponseDTO>(`${this.basePath}/v1/events/${encodeURIComponent(String(eventId))}/likes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new like action
     * Add new like action.
     * @param body 
     * @param accountId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLike2(body: LikeDTO, accountId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StgdrvResponseDTO>;
    public createLike2(body: LikeDTO, accountId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StgdrvResponseDTO>>;
    public createLike2(body: LikeDTO, accountId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StgdrvResponseDTO>>;
    public createLike2(body: LikeDTO, accountId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createLike2.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling createLike2.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createLike2.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<StgdrvResponseDTO>(`${this.basePath}/v1/accounts/${encodeURIComponent(String(accountId))}/likes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete like action
     * Delete like action
     * @param likeId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLike(likeId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StgdrvResponseDTO>;
    public deleteLike(likeId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StgdrvResponseDTO>>;
    public deleteLike(likeId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StgdrvResponseDTO>>;
    public deleteLike(likeId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (likeId === null || likeId === undefined) {
            throw new Error('Required parameter likeId was null or undefined when calling deleteLike.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteLike.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<StgdrvResponseDTO>(`${this.basePath}/v1/likes/${encodeURIComponent(String(likeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete like action
     * Delete like action
     * @param likeId 
     * @param eventId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLike1(likeId: string, eventId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StgdrvResponseDTO>;
    public deleteLike1(likeId: string, eventId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StgdrvResponseDTO>>;
    public deleteLike1(likeId: string, eventId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StgdrvResponseDTO>>;
    public deleteLike1(likeId: string, eventId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (likeId === null || likeId === undefined) {
            throw new Error('Required parameter likeId was null or undefined when calling deleteLike1.');
        }
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling deleteLike1.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteLike1.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<StgdrvResponseDTO>(`${this.basePath}/v1/events/${encodeURIComponent(String(eventId))}/likes/${encodeURIComponent(String(likeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete like action
     * Delete like action
     * @param likeId 
     * @param accountId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteLike2(likeId: string, accountId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StgdrvResponseDTO>;
    public deleteLike2(likeId: string, accountId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StgdrvResponseDTO>>;
    public deleteLike2(likeId: string, accountId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StgdrvResponseDTO>>;
    public deleteLike2(likeId: string, accountId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (likeId === null || likeId === undefined) {
            throw new Error('Required parameter likeId was null or undefined when calling deleteLike2.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling deleteLike2.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteLike2.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<StgdrvResponseDTO>(`${this.basePath}/v1/accounts/${encodeURIComponent(String(accountId))}/likes/${encodeURIComponent(String(likeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get like action
     * Get like action
     * @param likeId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLike(likeId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<LikeDTO>;
    public getLike(likeId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LikeDTO>>;
    public getLike(likeId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LikeDTO>>;
    public getLike(likeId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (likeId === null || likeId === undefined) {
            throw new Error('Required parameter likeId was null or undefined when calling getLike.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getLike.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LikeDTO>(`${this.basePath}/v1/likes/${encodeURIComponent(String(likeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get like action
     * Get like action
     * @param likeId 
     * @param eventId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLike1(likeId: string, eventId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<LikeDTO>;
    public getLike1(likeId: string, eventId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LikeDTO>>;
    public getLike1(likeId: string, eventId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LikeDTO>>;
    public getLike1(likeId: string, eventId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (likeId === null || likeId === undefined) {
            throw new Error('Required parameter likeId was null or undefined when calling getLike1.');
        }
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getLike1.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getLike1.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LikeDTO>(`${this.basePath}/v1/events/${encodeURIComponent(String(eventId))}/likes/${encodeURIComponent(String(likeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get like action
     * Get like action
     * @param likeId 
     * @param accountId 
     * @param authorization Authorization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLike2(likeId: string, accountId: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<LikeDTO>;
    public getLike2(likeId: string, accountId: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LikeDTO>>;
    public getLike2(likeId: string, accountId: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LikeDTO>>;
    public getLike2(likeId: string, accountId: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (likeId === null || likeId === undefined) {
            throw new Error('Required parameter likeId was null or undefined when calling getLike2.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getLike2.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getLike2.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<LikeDTO>(`${this.basePath}/v1/accounts/${encodeURIComponent(String(accountId))}/likes/${encodeURIComponent(String(likeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve likes
     * Retrieves likes
     * @param authorization Authorization
     * @param limit Max number of results
     * @param page Page index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLikes(authorization: string, limit?: string, page?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<LikeDTO>>;
    public getLikes(authorization: string, limit?: string, page?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LikeDTO>>>;
    public getLikes(authorization: string, limit?: string, page?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LikeDTO>>>;
    public getLikes(authorization: string, limit?: string, page?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getLikes.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<LikeDTO>>(`${this.basePath}/v1/likes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve likes
     * Retrieves likes
     * @param eventId 
     * @param authorization Authorization
     * @param limit Max number of results
     * @param page Page index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLikes1(eventId: string, authorization: string, limit?: string, page?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<LikeDTO>>;
    public getLikes1(eventId: string, authorization: string, limit?: string, page?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LikeDTO>>>;
    public getLikes1(eventId: string, authorization: string, limit?: string, page?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LikeDTO>>>;
    public getLikes1(eventId: string, authorization: string, limit?: string, page?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling getLikes1.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getLikes1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<LikeDTO>>(`${this.basePath}/v1/events/${encodeURIComponent(String(eventId))}/likes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve likes
     * Retrieves likes
     * @param accountId 
     * @param authorization Authorization
     * @param limit Max number of results
     * @param page Page index
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLikes2(accountId: string, authorization: string, limit?: string, page?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<LikeDTO>>;
    public getLikes2(accountId: string, authorization: string, limit?: string, page?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LikeDTO>>>;
    public getLikes2(accountId: string, authorization: string, limit?: string, page?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LikeDTO>>>;
    public getLikes2(accountId: string, authorization: string, limit?: string, page?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getLikes2.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getLikes2.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<LikeDTO>>(`${this.basePath}/v1/accounts/${encodeURIComponent(String(accountId))}/likes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
