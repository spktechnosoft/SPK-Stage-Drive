package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import java.util.Date;

/**
 * RidePassenger generated by hbm
 */
@Entity
@EntityListeners(value={
RidePassenger.LastUpdateListener.class,
RidePassenger.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="RidePassenger")
@NamedQueries({
@NamedQuery(name = "RidePassenger.findAll", query = "SELECT n FROM RidePassenger n"),
@NamedQuery(name = "RidePassenger.findByRide", query = "SELECT n FROM RidePassenger n WHERE n.ride = :ride"),
@NamedQuery(name = "RidePassenger.findByUid", query = "SELECT n FROM RidePassenger n WHERE n.uid = :uid"),
@NamedQuery(name = "RidePassenger.findByCreated", query = "SELECT n FROM RidePassenger n WHERE n.created = :created"),
@NamedQuery(name = "RidePassenger.findByModified", query = "SELECT n FROM RidePassenger n WHERE n.modified = :modified"),
@NamedQuery(name = "RidePassenger.findByStatus", query = "SELECT n FROM RidePassenger n WHERE n.status = :status"),
@NamedQuery(name = "RidePassenger.findByVisible", query = "SELECT n FROM RidePassenger n WHERE n.visible = :visible"),
@NamedQuery(name = "RidePassenger.findByAccountId", query = "SELECT n FROM RidePassenger n WHERE n.accountId = :accountId"),
@NamedQuery(name = "RidePassenger.findByTransactionId", query = "SELECT n FROM RidePassenger n WHERE n.transactionId = :transactionId"),
@NamedQuery(name = "RidePassenger.findBySeats", query = "SELECT n FROM RidePassenger n WHERE n.seats = :seats"),
})
@Table(name="ride_passenger"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class RidePassenger  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "RidePassenger.findById";
        public static final String FINDBYRIDE = "RidePassenger.findByRide";
        public static final String FINDBYUID = "RidePassenger.findByUid";
        public static final String FINDBYCREATED = "RidePassenger.findByCreated";
        public static final String FINDBYMODIFIED = "RidePassenger.findByModified";
        public static final String FINDBYSTATUS = "RidePassenger.findByStatus";
        public static final String FINDBYVISIBLE = "RidePassenger.findByVisible";
        public static final String FINDBYACCOUNTID = "RidePassenger.findByAccountId";
        public static final String FINDBYTRANSACTIONID = "RidePassenger.findByTransactionId";
        public static final String FINDBYSEATS = "RidePassenger.findBySeats";
    }




     private RidePassengerId id;
     private Ride ride;
     private String uid;
     private Date created;
     private Date modified;
     private String status;
     private Boolean visible;
     private Integer accountId;
     private String transactionId;
     private Integer seats;

    public RidePassenger() {


        //

        //

        //
        //this.setUid(TokenUtils.generateUid());
        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

        //

    }

	
    public RidePassenger(RidePassengerId id, Ride ride, String uid, Date created, Date modified) {
        this.id = id;
        this.ride = ride;
        this.uid = uid;
        this.created = created;
        this.modified = modified;
    }
    public RidePassenger(RidePassengerId id, Ride ride, String uid, Date created, Date modified, String status, Boolean visible, Integer accountId, String transactionId, Integer seats) {
       this.id = id;
       this.ride = ride;
       this.uid = uid;
       this.created = created;
       this.modified = modified;
       this.status = status;
       this.visible = visible;
       this.accountId = accountId;
       this.transactionId = transactionId;
       this.seats = seats;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="id", column=@Column(name="id", nullable=false) ), 
        @AttributeOverride(name="rideId", column=@Column(name="ride_id", nullable=false) ) } )
    public RidePassengerId getId() {
        return this.id;
    }
    
    public void setId(RidePassengerId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="ride_id", nullable=false, insertable=false, updatable=false)
    public Ride getRide() {
        return this.ride;
    }
    
    public void setRide(Ride ride) {
        this.ride = ride;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="status", length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="account_id")
    public Integer getAccountId() {
        return this.accountId;
    }
    
    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }
    
    @Column(name="transaction_id")
    public String getTransactionId() {
        return this.transactionId;
    }
    
    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }
    
    @Column(name="seats")
    public Integer getSeats() {
        return this.seats;
    }
    
    public void setSeats(Integer seats) {
        this.seats = seats;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(RidePassenger o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(RidePassenger o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
