package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Brand generated by hbm
 */
@Entity
@EntityListeners(value={
Brand.LastUpdateListener.class,
Brand.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Brand")
@NamedQueries({
@NamedQuery(name = "Brand.findAll", query = "SELECT n FROM Brand n"),
@NamedQuery(name = "Brand.findByUid", query = "SELECT n FROM Brand n WHERE n.uid = :uid"),
@NamedQuery(name = "Brand.findByStatus", query = "SELECT n FROM Brand n WHERE n.status = :status"),
@NamedQuery(name = "Brand.findByVisible", query = "SELECT n FROM Brand n WHERE n.visible = :visible"),
@NamedQuery(name = "Brand.findByCreated", query = "SELECT n FROM Brand n WHERE n.created = :created"),
@NamedQuery(name = "Brand.findByModified", query = "SELECT n FROM Brand n WHERE n.modified = :modified"),
@NamedQuery(name = "Brand.findByName", query = "SELECT n FROM Brand n WHERE n.name = :name"),
@NamedQuery(name = "Brand.findByDescription", query = "SELECT n FROM Brand n WHERE n.description = :description"),
@NamedQuery(name = "Brand.findByBase", query = "SELECT n FROM Brand n WHERE n.base = :base"),
@NamedQuery(name = "Brand.findByUri", query = "SELECT n FROM Brand n WHERE n.uri = :uri"),
})
@Table(name="brand"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = {@UniqueConstraint(columnNames="uid"), @UniqueConstraint(columnNames="name")} 
)
public class Brand  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "Brand.findById";
        public static final String FINDBYUID = "Brand.findByUid";
        public static final String FINDBYSTATUS = "Brand.findByStatus";
        public static final String FINDBYVISIBLE = "Brand.findByVisible";
        public static final String FINDBYCREATED = "Brand.findByCreated";
        public static final String FINDBYMODIFIED = "Brand.findByModified";
        public static final String FINDBYNAME = "Brand.findByName";
        public static final String FINDBYDESCRIPTION = "Brand.findByDescription";
        public static final String FINDBYBASE = "Brand.findByBase";
        public static final String FINDBYURI = "Brand.findByUri";
    }




     private Integer id;
     private String uid;
     private String status;
     private Boolean visible;
     private Date created;
     private Date modified;
     private String name;
     private String description;
     private Boolean base;
     private String uri;
     private List<CatalogHasBrand> catalogHasBrands = new ArrayList<CatalogHasBrand>(0);
     private List<ItemHasBrand> itemHasBrands = new ArrayList<ItemHasBrand>(0);

    public Brand() {


        //

        //
        //this.setUid(TokenUtils.generateUid());
        //

        //

        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

        //

        //

    }

	
    public Brand(String uid, String status, Date created, Date modified, String name) {
        this.uid = uid;
        this.status = status;
        this.created = created;
        this.modified = modified;
        this.name = name;
    }
    public Brand(String uid, String status, Boolean visible, Date created, Date modified, String name, String description, Boolean base, String uri, List<CatalogHasBrand> catalogHasBrands, List<ItemHasBrand> itemHasBrands) {
       this.uid = uid;
       this.status = status;
       this.visible = visible;
       this.created = created;
       this.modified = modified;
       this.name = name;
       this.description = description;
       this.base = base;
       this.uri = uri;
       this.catalogHasBrands = catalogHasBrands;
       this.itemHasBrands = itemHasBrands;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    
    @Column(name="status", nullable=false, length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="name", unique=true, nullable=false, length=100)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="description", length=65535)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    @Column(name="base")
    public Boolean getBase() {
        return this.base;
    }
    
    public void setBase(Boolean base) {
        this.base = base;
    }
    
    @Column(name="uri", length=65535)
    public String getUri() {
        return this.uri;
    }
    
    public void setUri(String uri) {
        this.uri = uri;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="brand")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Brand.CatalogHasBrands")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<CatalogHasBrand> getCatalogHasBrands() {
        return this.catalogHasBrands;
    }
    
    public void setCatalogHasBrands(List<CatalogHasBrand> catalogHasBrands) {
        this.catalogHasBrands = catalogHasBrands;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="brand")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Brand.ItemHasBrands")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<ItemHasBrand> getItemHasBrands() {
        return this.itemHasBrands;
    }
    
    public void setItemHasBrands(List<ItemHasBrand> itemHasBrands) {
        this.itemHasBrands = itemHasBrands;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(Brand o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(Brand o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
