package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Fellowship generated by hbm
 */
@Entity
@EntityListeners(value={
Fellowship.LastUpdateListener.class,
Fellowship.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Fellowship")
@NamedQueries({
@NamedQuery(name = "Fellowship.findAll", query = "SELECT n FROM Fellowship n"),
@NamedQuery(name = "Fellowship.findByUid", query = "SELECT n FROM Fellowship n WHERE n.uid = :uid"),
@NamedQuery(name = "Fellowship.findByName", query = "SELECT n FROM Fellowship n WHERE n.name = :name"),
@NamedQuery(name = "Fellowship.findByDescription", query = "SELECT n FROM Fellowship n WHERE n.description = :description"),
@NamedQuery(name = "Fellowship.findByCreated", query = "SELECT n FROM Fellowship n WHERE n.created = :created"),
@NamedQuery(name = "Fellowship.findByModified", query = "SELECT n FROM Fellowship n WHERE n.modified = :modified"),
@NamedQuery(name = "Fellowship.findByVisible", query = "SELECT n FROM Fellowship n WHERE n.visible = :visible"),
@NamedQuery(name = "Fellowship.findByAccountid", query = "SELECT n FROM Fellowship n WHERE n.accountid = :accountid"),
@NamedQuery(name = "Fellowship.findByStatus", query = "SELECT n FROM Fellowship n WHERE n.status = :status"),
})
@Table(name="fellowship"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class Fellowship  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "Fellowship.findById";
        public static final String FINDBYUID = "Fellowship.findByUid";
        public static final String FINDBYNAME = "Fellowship.findByName";
        public static final String FINDBYDESCRIPTION = "Fellowship.findByDescription";
        public static final String FINDBYCREATED = "Fellowship.findByCreated";
        public static final String FINDBYMODIFIED = "Fellowship.findByModified";
        public static final String FINDBYVISIBLE = "Fellowship.findByVisible";
        public static final String FINDBYACCOUNTID = "Fellowship.findByAccountid";
        public static final String FINDBYSTATUS = "Fellowship.findByStatus";
    }




     private Integer id;
     private String uid;
     private String name;
     private String description;
     private Date created;
     private Date modified;
     private Boolean visible;
     private int accountid;
     private String status;
     private List<EventHasFellowship> eventHasFellowships = new ArrayList<EventHasFellowship>(0);

    public Fellowship() {


        //

        //
        //this.setUid(TokenUtils.generateUid());
        //

        //

        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

    }

	
    public Fellowship(String uid, String name, Date created, Date modified, int accountid) {
        this.uid = uid;
        this.name = name;
        this.created = created;
        this.modified = modified;
        this.accountid = accountid;
    }
    public Fellowship(String uid, String name, String description, Date created, Date modified, Boolean visible, int accountid, String status, List<EventHasFellowship> eventHasFellowships) {
       this.uid = uid;
       this.name = name;
       this.description = description;
       this.created = created;
       this.modified = modified;
       this.visible = visible;
       this.accountid = accountid;
       this.status = status;
       this.eventHasFellowships = eventHasFellowships;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    
    @Column(name="name", nullable=false)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="description", length=65535)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="accountid", nullable=false)
    public int getAccountid() {
        return this.accountid;
    }
    
    public void setAccountid(int accountid) {
        this.accountid = accountid;
    }
    
    @Column(name="status", length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="fellowship")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Fellowship.EventHasFellowships")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasFellowship> getEventHasFellowships() {
        return this.eventHasFellowships;
    }
    
    public void setEventHasFellowships(List<EventHasFellowship> eventHasFellowships) {
        this.eventHasFellowships = eventHasFellowships;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(Fellowship o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(Fellowship o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
