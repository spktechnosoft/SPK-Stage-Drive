package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * CatalogHasItem generated by hbm
 */
@Entity
@EntityListeners(value={
CatalogHasItem.LastUpdateListener.class,
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="CatalogHasItem")
@NamedQueries({
@NamedQuery(name = "CatalogHasItem.findAll", query = "SELECT n FROM CatalogHasItem n"),
@NamedQuery(name = "CatalogHasItem.findByItem", query = "SELECT n FROM CatalogHasItem n WHERE n.item = :item"),
@NamedQuery(name = "CatalogHasItem.findByCatalog", query = "SELECT n FROM CatalogHasItem n WHERE n.catalog = :catalog"),
@NamedQuery(name = "CatalogHasItem.findByCreated", query = "SELECT n FROM CatalogHasItem n WHERE n.created = :created"),
@NamedQuery(name = "CatalogHasItem.findByModified", query = "SELECT n FROM CatalogHasItem n WHERE n.modified = :modified"),
@NamedQuery(name = "CatalogHasItem.findByVisible", query = "SELECT n FROM CatalogHasItem n WHERE n.visible = :visible"),
})
@Table(name="catalog_has_item"
/*
    ,catalog="stgdrv_2"
*/
)
public class CatalogHasItem  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "CatalogHasItem.findById";
        public static final String FINDBYITEM = "CatalogHasItem.findByItem";
        public static final String FINDBYCATALOG = "CatalogHasItem.findByCatalog";
        public static final String FINDBYCREATED = "CatalogHasItem.findByCreated";
        public static final String FINDBYMODIFIED = "CatalogHasItem.findByModified";
        public static final String FINDBYVISIBLE = "CatalogHasItem.findByVisible";
    }




     private CatalogHasItemId id;
     private Item item;
     private Catalog catalog;
     private Date created;
     private Date modified;
     private Boolean visible;

    public CatalogHasItem() {


        //

        //

        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

    }

	
    public CatalogHasItem(CatalogHasItemId id, Item item, Catalog catalog, Date created, Date modified) {
        this.id = id;
        this.item = item;
        this.catalog = catalog;
        this.created = created;
        this.modified = modified;
    }
    public CatalogHasItem(CatalogHasItemId id, Item item, Catalog catalog, Date created, Date modified, Boolean visible) {
       this.id = id;
       this.item = item;
       this.catalog = catalog;
       this.created = created;
       this.modified = modified;
       this.visible = visible;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="catalogId", column=@Column(name="catalog_id", nullable=false) ), 
        @AttributeOverride(name="itemId", column=@Column(name="item_id", nullable=false) ) } )
    public CatalogHasItemId getId() {
        return this.id;
    }
    
    public void setId(CatalogHasItemId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="item_id", nullable=false, insertable=false, updatable=false)
    public Item getItem() {
        return this.item;
    }
    
    public void setItem(Item item) {
        this.item = item;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="catalog_id", nullable=false, insertable=false, updatable=false)
    public Catalog getCatalog() {
        return this.catalog;
    }
    
    public void setCatalog(Catalog catalog) {
        this.catalog = catalog;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }





    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(CatalogHasItem o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
