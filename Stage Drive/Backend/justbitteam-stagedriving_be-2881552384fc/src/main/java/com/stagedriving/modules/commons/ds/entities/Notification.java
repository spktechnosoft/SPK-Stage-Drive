package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Notification generated by hbm
 */
@Entity
@EntityListeners(value={
Notification.LastUpdateListener.class,
Notification.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Notification")
@NamedQueries({
@NamedQuery(name = "Notification.findAll", query = "SELECT n FROM Notification n"),
@NamedQuery(name = "Notification.findByUid", query = "SELECT n FROM Notification n WHERE n.uid = :uid"),
@NamedQuery(name = "Notification.findByCreated", query = "SELECT n FROM Notification n WHERE n.created = :created"),
@NamedQuery(name = "Notification.findByModified", query = "SELECT n FROM Notification n WHERE n.modified = :modified"),
@NamedQuery(name = "Notification.findByName", query = "SELECT n FROM Notification n WHERE n.name = :name"),
@NamedQuery(name = "Notification.findByDescription", query = "SELECT n FROM Notification n WHERE n.description = :description"),
@NamedQuery(name = "Notification.findByContent", query = "SELECT n FROM Notification n WHERE n.content = :content"),
@NamedQuery(name = "Notification.findByExpires", query = "SELECT n FROM Notification n WHERE n.expires = :expires"),
@NamedQuery(name = "Notification.findByStatus", query = "SELECT n FROM Notification n WHERE n.status = :status"),
@NamedQuery(name = "Notification.findByType", query = "SELECT n FROM Notification n WHERE n.type = :type"),
@NamedQuery(name = "Notification.findByVisible", query = "SELECT n FROM Notification n WHERE n.visible = :visible"),
@NamedQuery(name = "Notification.findBySync", query = "SELECT n FROM Notification n WHERE n.sync = :sync"),
@NamedQuery(name = "Notification.findByStatusDescription", query = "SELECT n FROM Notification n WHERE n.statusDescription = :statusDescription"),
@NamedQuery(name = "Notification.findBySender", query = "SELECT n FROM Notification n WHERE n.sender = :sender"),
@NamedQuery(name = "Notification.findByScope", query = "SELECT n FROM Notification n WHERE n.scope = :scope"),
@NamedQuery(name = "Notification.findByReplyAddress", query = "SELECT n FROM Notification n WHERE n.replyAddress = :replyAddress"),
@NamedQuery(name = "Notification.findByExtId", query = "SELECT n FROM Notification n WHERE n.extId = :extId"),
@NamedQuery(name = "Notification.findByJobId", query = "SELECT n FROM Notification n WHERE n.jobId = :jobId"),
@NamedQuery(name = "Notification.findByWhenSend", query = "SELECT n FROM Notification n WHERE n.whenSend = :whenSend"),
@NamedQuery(name = "Notification.findByTag", query = "SELECT n FROM Notification n WHERE n.tag = :tag"),
})
@Table(name="notification"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = {@UniqueConstraint(columnNames="uid"), @UniqueConstraint(columnNames="tag"), @UniqueConstraint(columnNames="ext_id")} 
)
public class Notification  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "Notification.findById";
        public static final String FINDBYUID = "Notification.findByUid";
        public static final String FINDBYCREATED = "Notification.findByCreated";
        public static final String FINDBYMODIFIED = "Notification.findByModified";
        public static final String FINDBYNAME = "Notification.findByName";
        public static final String FINDBYDESCRIPTION = "Notification.findByDescription";
        public static final String FINDBYCONTENT = "Notification.findByContent";
        public static final String FINDBYEXPIRES = "Notification.findByExpires";
        public static final String FINDBYSTATUS = "Notification.findByStatus";
        public static final String FINDBYTYPE = "Notification.findByType";
        public static final String FINDBYVISIBLE = "Notification.findByVisible";
        public static final String FINDBYSYNC = "Notification.findBySync";
        public static final String FINDBYSTATUSDESCRIPTION = "Notification.findByStatusDescription";
        public static final String FINDBYSENDER = "Notification.findBySender";
        public static final String FINDBYSCOPE = "Notification.findByScope";
        public static final String FINDBYREPLYADDRESS = "Notification.findByReplyAddress";
        public static final String FINDBYEXTID = "Notification.findByExtId";
        public static final String FINDBYJOBID = "Notification.findByJobId";
        public static final String FINDBYWHENSEND = "Notification.findByWhenSend";
        public static final String FINDBYTAG = "Notification.findByTag";
    }




     private Integer id;
     private String uid;
     private Date created;
     private Date modified;
     private String name;
     private String description;
     private String content;
     private Date expires;
     private String status;
     private String type;
     private Boolean visible;
     private Boolean sync;
     private String statusDescription;
     private String sender;
     private String scope;
     private String replyAddress;
     private String extId;
     private String jobId;
     private Date whenSend;
     private String tag;
     private List<NotificationRecipient> notificationRecipients = new ArrayList<NotificationRecipient>(0);
     private List<NotificationMeta> notificationMetas = new ArrayList<NotificationMeta>(0);

    public Notification() {


        //

        //
        //this.setUid(TokenUtils.generateUid());
        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

    }

	
    public Notification(String uid, Date created, Date modified, String status, String type, String sender, String scope) {
        this.uid = uid;
        this.created = created;
        this.modified = modified;
        this.status = status;
        this.type = type;
        this.sender = sender;
        this.scope = scope;
    }
    public Notification(String uid, Date created, Date modified, String name, String description, String content, Date expires, String status, String type, Boolean visible, Boolean sync, String statusDescription, String sender, String scope, String replyAddress, String extId, String jobId, Date whenSend, String tag, List<NotificationRecipient> notificationRecipients, List<NotificationMeta> notificationMetas) {
       this.uid = uid;
       this.created = created;
       this.modified = modified;
       this.name = name;
       this.description = description;
       this.content = content;
       this.expires = expires;
       this.status = status;
       this.type = type;
       this.visible = visible;
       this.sync = sync;
       this.statusDescription = statusDescription;
       this.sender = sender;
       this.scope = scope;
       this.replyAddress = replyAddress;
       this.extId = extId;
       this.jobId = jobId;
       this.whenSend = whenSend;
       this.tag = tag;
       this.notificationRecipients = notificationRecipients;
       this.notificationMetas = notificationMetas;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="name")
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="description", length=65535)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    @Column(name="content", length=65535)
    public String getContent() {
        return this.content;
    }
    
    public void setContent(String content) {
        this.content = content;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="expires", length=0)
    public Date getExpires() {
        return this.expires;
    }
    
    public void setExpires(Date expires) {
        this.expires = expires;
    }
    
    @Column(name="status", nullable=false, length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    @Column(name="type", nullable=false, length=45)
    public String getType() {
        return this.type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="sync")
    public Boolean getSync() {
        return this.sync;
    }
    
    public void setSync(Boolean sync) {
        this.sync = sync;
    }
    
    @Column(name="status_description", length=65535)
    public String getStatusDescription() {
        return this.statusDescription;
    }
    
    public void setStatusDescription(String statusDescription) {
        this.statusDescription = statusDescription;
    }
    
    @Column(name="sender", nullable=false)
    public String getSender() {
        return this.sender;
    }
    
    public void setSender(String sender) {
        this.sender = sender;
    }
    
    @Column(name="scope", nullable=false, length=45)
    public String getScope() {
        return this.scope;
    }
    
    public void setScope(String scope) {
        this.scope = scope;
    }
    
    @Column(name="reply_address")
    public String getReplyAddress() {
        return this.replyAddress;
    }
    
    public void setReplyAddress(String replyAddress) {
        this.replyAddress = replyAddress;
    }
    
    @Column(name="ext_id", unique=true, length=100)
    public String getExtId() {
        return this.extId;
    }
    
    public void setExtId(String extId) {
        this.extId = extId;
    }
    
    @Column(name="job_id", length=100)
    public String getJobId() {
        return this.jobId;
    }
    
    public void setJobId(String jobId) {
        this.jobId = jobId;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="when_send", length=0)
    public Date getWhenSend() {
        return this.whenSend;
    }
    
    public void setWhenSend(Date whenSend) {
        this.whenSend = whenSend;
    }
    
    @Column(name="tag", unique=true, length=100)
    public String getTag() {
        return this.tag;
    }
    
    public void setTag(String tag) {
        this.tag = tag;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="notification")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Notification.NotificationRecipients")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<NotificationRecipient> getNotificationRecipients() {
        return this.notificationRecipients;
    }
    
    public void setNotificationRecipients(List<NotificationRecipient> notificationRecipients) {
        this.notificationRecipients = notificationRecipients;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="notification")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Notification.NotificationMetas")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<NotificationMeta> getNotificationMetas() {
        return this.notificationMetas;
    }
    
    public void setNotificationMetas(List<NotificationMeta> notificationMetas) {
        this.notificationMetas = notificationMetas;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(Notification o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(Notification o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
