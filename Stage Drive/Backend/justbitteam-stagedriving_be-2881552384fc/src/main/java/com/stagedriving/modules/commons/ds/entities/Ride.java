package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Ride generated by hbm
 */
@Entity
@EntityListeners(value={
Ride.LastUpdateListener.class,
Ride.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Ride")
@NamedQueries({
@NamedQuery(name = "Ride.findAll", query = "SELECT n FROM Ride n"),
@NamedQuery(name = "Ride.findByUid", query = "SELECT n FROM Ride n WHERE n.uid = :uid"),
@NamedQuery(name = "Ride.findByFromLat", query = "SELECT n FROM Ride n WHERE n.fromLat = :fromLat"),
@NamedQuery(name = "Ride.findByFromLon", query = "SELECT n FROM Ride n WHERE n.fromLon = :fromLon"),
@NamedQuery(name = "Ride.findByToLat", query = "SELECT n FROM Ride n WHERE n.toLat = :toLat"),
@NamedQuery(name = "Ride.findByToLon", query = "SELECT n FROM Ride n WHERE n.toLon = :toLon"),
@NamedQuery(name = "Ride.findByEventid", query = "SELECT n FROM Ride n WHERE n.eventid = :eventid"),
@NamedQuery(name = "Ride.findByStatus", query = "SELECT n FROM Ride n WHERE n.status = :status"),
@NamedQuery(name = "Ride.findByVisible", query = "SELECT n FROM Ride n WHERE n.visible = :visible"),
@NamedQuery(name = "Ride.findByAccountid", query = "SELECT n FROM Ride n WHERE n.accountid = :accountid"),
@NamedQuery(name = "Ride.findByCreated", query = "SELECT n FROM Ride n WHERE n.created = :created"),
@NamedQuery(name = "Ride.findByModified", query = "SELECT n FROM Ride n WHERE n.modified = :modified"),
@NamedQuery(name = "Ride.findByWithTickets", query = "SELECT n FROM Ride n WHERE n.withTickets = :withTickets"),
@NamedQuery(name = "Ride.findByWithBookings", query = "SELECT n FROM Ride n WHERE n.withBookings = :withBookings"),
@NamedQuery(name = "Ride.findByGoingDepartureDate", query = "SELECT n FROM Ride n WHERE n.goingDepartureDate = :goingDepartureDate"),
@NamedQuery(name = "Ride.findByGoingArrivalDate", query = "SELECT n FROM Ride n WHERE n.goingArrivalDate = :goingArrivalDate"),
@NamedQuery(name = "Ride.findByReturnDepartureDate", query = "SELECT n FROM Ride n WHERE n.returnDepartureDate = :returnDepartureDate"),
@NamedQuery(name = "Ride.findByReturnArrivalDate", query = "SELECT n FROM Ride n WHERE n.returnArrivalDate = :returnArrivalDate"),
@NamedQuery(name = "Ride.findByType", query = "SELECT n FROM Ride n WHERE n.type = :type"),
@NamedQuery(name = "Ride.findByHasReturn", query = "SELECT n FROM Ride n WHERE n.hasReturn = :hasReturn"),
@NamedQuery(name = "Ride.findByTotalPrice", query = "SELECT n FROM Ride n WHERE n.totalPrice = :totalPrice"),
@NamedQuery(name = "Ride.findByPrice", query = "SELECT n FROM Ride n WHERE n.price = :price"),
@NamedQuery(name = "Ride.findByFee", query = "SELECT n FROM Ride n WHERE n.fee = :fee"),
@NamedQuery(name = "Ride.findByCurrency", query = "SELECT n FROM Ride n WHERE n.currency = :currency"),
@NamedQuery(name = "Ride.findBySeats", query = "SELECT n FROM Ride n WHERE n.seats = :seats"),
@NamedQuery(name = "Ride.findByFromEventId", query = "SELECT n FROM Ride n WHERE n.fromEventId = :fromEventId"),
@NamedQuery(name = "Ride.findByToEventId", query = "SELECT n FROM Ride n WHERE n.toEventId = :toEventId"),
@NamedQuery(name = "Ride.findByFromAddress", query = "SELECT n FROM Ride n WHERE n.fromAddress = :fromAddress"),
@NamedQuery(name = "Ride.findByToAddress", query = "SELECT n FROM Ride n WHERE n.toAddress = :toAddress"),
})
@Table(name="ride"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class Ride  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "Ride.findById";
        public static final String FINDBYUID = "Ride.findByUid";
        public static final String FINDBYFROMLAT = "Ride.findByFromLat";
        public static final String FINDBYFROMLON = "Ride.findByFromLon";
        public static final String FINDBYTOLAT = "Ride.findByToLat";
        public static final String FINDBYTOLON = "Ride.findByToLon";
        public static final String FINDBYEVENTID = "Ride.findByEventid";
        public static final String FINDBYSTATUS = "Ride.findByStatus";
        public static final String FINDBYVISIBLE = "Ride.findByVisible";
        public static final String FINDBYACCOUNTID = "Ride.findByAccountid";
        public static final String FINDBYCREATED = "Ride.findByCreated";
        public static final String FINDBYMODIFIED = "Ride.findByModified";
        public static final String FINDBYWITHTICKETS = "Ride.findByWithTickets";
        public static final String FINDBYWITHBOOKINGS = "Ride.findByWithBookings";
        public static final String FINDBYGOINGDEPARTUREDATE = "Ride.findByGoingDepartureDate";
        public static final String FINDBYGOINGARRIVALDATE = "Ride.findByGoingArrivalDate";
        public static final String FINDBYRETURNDEPARTUREDATE = "Ride.findByReturnDepartureDate";
        public static final String FINDBYRETURNARRIVALDATE = "Ride.findByReturnArrivalDate";
        public static final String FINDBYTYPE = "Ride.findByType";
        public static final String FINDBYHASRETURN = "Ride.findByHasReturn";
        public static final String FINDBYTOTALPRICE = "Ride.findByTotalPrice";
        public static final String FINDBYPRICE = "Ride.findByPrice";
        public static final String FINDBYFEE = "Ride.findByFee";
        public static final String FINDBYCURRENCY = "Ride.findByCurrency";
        public static final String FINDBYSEATS = "Ride.findBySeats";
        public static final String FINDBYFROMEVENTID = "Ride.findByFromEventId";
        public static final String FINDBYTOEVENTID = "Ride.findByToEventId";
        public static final String FINDBYFROMADDRESS = "Ride.findByFromAddress";
        public static final String FINDBYTOADDRESS = "Ride.findByToAddress";
    }




     private Integer id;
     private String uid;
     private double fromLat;
     private double fromLon;
     private double toLat;
     private double toLon;
     private String eventid;
     private String status;
     private Boolean visible;
     private String accountid;
     private Date created;
     private Date modified;
     private Boolean withTickets;
     private Boolean withBookings;
     private Date goingDepartureDate;
     private Date goingArrivalDate;
     private Date returnDepartureDate;
     private Date returnArrivalDate;
     private String type;
     private Boolean hasReturn;
     private double totalPrice;
     private double price;
     private double fee;
     private String currency;
     private Integer seats;
     private String fromEventId;
     private String toEventId;
     private String fromAddress;
     private String toAddress;
     private List<RideHasAction> rideHasActions = new ArrayList<RideHasAction>(0);
     private List<RidePassenger> ridePassengers = new ArrayList<RidePassenger>(0);

    public Ride() {


        //

        //
        //this.setUid(TokenUtils.generateUid());
        //

        //

        //

        //

        //

        //

        //

        //

        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

    }

	
    public Ride(String uid, double fromLat, double fromLon, double toLat, double toLon, Date created, Date modified, double totalPrice, double price, double fee, String currency) {
        this.uid = uid;
        this.fromLat = fromLat;
        this.fromLon = fromLon;
        this.toLat = toLat;
        this.toLon = toLon;
        this.created = created;
        this.modified = modified;
        this.totalPrice = totalPrice;
        this.price = price;
        this.fee = fee;
        this.currency = currency;
    }
    public Ride(String uid, double fromLat, double fromLon, double toLat, double toLon, String eventid, String status, Boolean visible, String accountid, Date created, Date modified, Boolean withTickets, Boolean withBookings, Date goingDepartureDate, Date goingArrivalDate, Date returnDepartureDate, Date returnArrivalDate, String type, Boolean hasReturn, double totalPrice, double price, double fee, String currency, Integer seats, String fromEventId, String toEventId, String fromAddress, String toAddress, List<RideHasAction> rideHasActions, List<RidePassenger> ridePassengers) {
       this.uid = uid;
       this.fromLat = fromLat;
       this.fromLon = fromLon;
       this.toLat = toLat;
       this.toLon = toLon;
       this.eventid = eventid;
       this.status = status;
       this.visible = visible;
       this.accountid = accountid;
       this.created = created;
       this.modified = modified;
       this.withTickets = withTickets;
       this.withBookings = withBookings;
       this.goingDepartureDate = goingDepartureDate;
       this.goingArrivalDate = goingArrivalDate;
       this.returnDepartureDate = returnDepartureDate;
       this.returnArrivalDate = returnArrivalDate;
       this.type = type;
       this.hasReturn = hasReturn;
       this.totalPrice = totalPrice;
       this.price = price;
       this.fee = fee;
       this.currency = currency;
       this.seats = seats;
       this.fromEventId = fromEventId;
       this.toEventId = toEventId;
       this.fromAddress = fromAddress;
       this.toAddress = toAddress;
       this.rideHasActions = rideHasActions;
       this.ridePassengers = ridePassengers;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    
    @Column(name="from_lat", nullable=false, precision=22, scale=0)
    public double getFromLat() {
        return this.fromLat;
    }
    
    public void setFromLat(double fromLat) {
        this.fromLat = fromLat;
    }
    
    @Column(name="from_lon", nullable=false, precision=22, scale=0)
    public double getFromLon() {
        return this.fromLon;
    }
    
    public void setFromLon(double fromLon) {
        this.fromLon = fromLon;
    }
    
    @Column(name="to_lat", nullable=false, precision=22, scale=0)
    public double getToLat() {
        return this.toLat;
    }
    
    public void setToLat(double toLat) {
        this.toLat = toLat;
    }
    
    @Column(name="to_lon", nullable=false, precision=22, scale=0)
    public double getToLon() {
        return this.toLon;
    }
    
    public void setToLon(double toLon) {
        this.toLon = toLon;
    }
    
    @Column(name="eventid")
    public String getEventid() {
        return this.eventid;
    }
    
    public void setEventid(String eventid) {
        this.eventid = eventid;
    }
    
    @Column(name="status", length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="accountid")
    public String getAccountid() {
        return this.accountid;
    }
    
    public void setAccountid(String accountid) {
        this.accountid = accountid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="with_tickets")
    public Boolean getWithTickets() {
        return this.withTickets;
    }
    
    public void setWithTickets(Boolean withTickets) {
        this.withTickets = withTickets;
    }
    
    @Column(name="with_bookings")
    public Boolean getWithBookings() {
        return this.withBookings;
    }
    
    public void setWithBookings(Boolean withBookings) {
        this.withBookings = withBookings;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="going_departure_date", length=0)
    public Date getGoingDepartureDate() {
        return this.goingDepartureDate;
    }
    
    public void setGoingDepartureDate(Date goingDepartureDate) {
        this.goingDepartureDate = goingDepartureDate;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="going_arrival_date", length=0)
    public Date getGoingArrivalDate() {
        return this.goingArrivalDate;
    }
    
    public void setGoingArrivalDate(Date goingArrivalDate) {
        this.goingArrivalDate = goingArrivalDate;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="return_departure_date", length=0)
    public Date getReturnDepartureDate() {
        return this.returnDepartureDate;
    }
    
    public void setReturnDepartureDate(Date returnDepartureDate) {
        this.returnDepartureDate = returnDepartureDate;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="return_arrival_date", length=0)
    public Date getReturnArrivalDate() {
        return this.returnArrivalDate;
    }
    
    public void setReturnArrivalDate(Date returnArrivalDate) {
        this.returnArrivalDate = returnArrivalDate;
    }
    
    @Column(name="type", length=15)
    public String getType() {
        return this.type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    @Column(name="has_return")
    public Boolean getHasReturn() {
        return this.hasReturn;
    }
    
    public void setHasReturn(Boolean hasReturn) {
        this.hasReturn = hasReturn;
    }
    
    @Column(name="total_price", nullable=false, precision=22, scale=0)
    public double getTotalPrice() {
        return this.totalPrice;
    }
    
    public void setTotalPrice(double totalPrice) {
        this.totalPrice = totalPrice;
    }
    
    @Column(name="price", nullable=false, precision=22, scale=0)
    public double getPrice() {
        return this.price;
    }
    
    public void setPrice(double price) {
        this.price = price;
    }
    
    @Column(name="fee", nullable=false, precision=22, scale=0)
    public double getFee() {
        return this.fee;
    }
    
    public void setFee(double fee) {
        this.fee = fee;
    }
    
    @Column(name="currency", nullable=false, length=15)
    public String getCurrency() {
        return this.currency;
    }
    
    public void setCurrency(String currency) {
        this.currency = currency;
    }
    
    @Column(name="seats")
    public Integer getSeats() {
        return this.seats;
    }
    
    public void setSeats(Integer seats) {
        this.seats = seats;
    }
    
    @Column(name="from_event_id")
    public String getFromEventId() {
        return this.fromEventId;
    }
    
    public void setFromEventId(String fromEventId) {
        this.fromEventId = fromEventId;
    }
    
    @Column(name="to_event_id")
    public String getToEventId() {
        return this.toEventId;
    }
    
    public void setToEventId(String toEventId) {
        this.toEventId = toEventId;
    }
    
    @Column(name="from_address")
    public String getFromAddress() {
        return this.fromAddress;
    }
    
    public void setFromAddress(String fromAddress) {
        this.fromAddress = fromAddress;
    }
    
    @Column(name="to_address")
    public String getToAddress() {
        return this.toAddress;
    }
    
    public void setToAddress(String toAddress) {
        this.toAddress = toAddress;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="ride")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Ride.RideHasActions")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<RideHasAction> getRideHasActions() {
        return this.rideHasActions;
    }
    
    public void setRideHasActions(List<RideHasAction> rideHasActions) {
        this.rideHasActions = rideHasActions;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="ride")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Ride.RidePassengers")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<RidePassenger> getRidePassengers() {
        return this.ridePassengers;
    }
    
    public void setRidePassengers(List<RidePassenger> ridePassengers) {
        this.ridePassengers = ridePassengers;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(Ride o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(Ride o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
