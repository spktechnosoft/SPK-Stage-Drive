package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import java.util.Date;

/**
 * TicketImage generated by hbm
 */
@Entity
@EntityListeners(value={
TicketImage.LastUpdateListener.class,
TicketImage.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="TicketImage")
@NamedQueries({
@NamedQuery(name = "TicketImage.findAll", query = "SELECT n FROM TicketImage n"),
@NamedQuery(name = "TicketImage.findByEventTicket", query = "SELECT n FROM TicketImage n WHERE n.eventTicket = :eventTicket"),
@NamedQuery(name = "TicketImage.findByUid", query = "SELECT n FROM TicketImage n WHERE n.uid = :uid"),
@NamedQuery(name = "TicketImage.findByCreated", query = "SELECT n FROM TicketImage n WHERE n.created = :created"),
@NamedQuery(name = "TicketImage.findByModified", query = "SELECT n FROM TicketImage n WHERE n.modified = :modified"),
@NamedQuery(name = "TicketImage.findBySmallUri", query = "SELECT n FROM TicketImage n WHERE n.smallUri = :smallUri"),
@NamedQuery(name = "TicketImage.findByNormalUri", query = "SELECT n FROM TicketImage n WHERE n.normalUri = :normalUri"),
@NamedQuery(name = "TicketImage.findByLargeUri", query = "SELECT n FROM TicketImage n WHERE n.largeUri = :largeUri"),
@NamedQuery(name = "TicketImage.findByVisible", query = "SELECT n FROM TicketImage n WHERE n.visible = :visible"),
@NamedQuery(name = "TicketImage.findByCategory", query = "SELECT n FROM TicketImage n WHERE n.category = :category"),
})
@Table(name="ticket_image"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class TicketImage  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "TicketImage.findById";
        public static final String FINDBYEVENTTICKET = "TicketImage.findByEventTicket";
        public static final String FINDBYUID = "TicketImage.findByUid";
        public static final String FINDBYCREATED = "TicketImage.findByCreated";
        public static final String FINDBYMODIFIED = "TicketImage.findByModified";
        public static final String FINDBYSMALLURI = "TicketImage.findBySmallUri";
        public static final String FINDBYNORMALURI = "TicketImage.findByNormalUri";
        public static final String FINDBYLARGEURI = "TicketImage.findByLargeUri";
        public static final String FINDBYVISIBLE = "TicketImage.findByVisible";
        public static final String FINDBYCATEGORY = "TicketImage.findByCategory";
    }




     private TicketImageId id;
     private EventTicket eventTicket;
     private String uid;
     private Date created;
     private Date modified;
     private String smallUri;
     private String normalUri;
     private String largeUri;
     private Boolean visible;
     private String category;

    public TicketImage() {


        //

        //

        //
        //this.setUid(TokenUtils.generateUid());
        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

        //

    }

	
    public TicketImage(TicketImageId id, EventTicket eventTicket, String uid, Date created, Date modified) {
        this.id = id;
        this.eventTicket = eventTicket;
        this.uid = uid;
        this.created = created;
        this.modified = modified;
    }
    public TicketImage(TicketImageId id, EventTicket eventTicket, String uid, Date created, Date modified, String smallUri, String normalUri, String largeUri, Boolean visible, String category) {
       this.id = id;
       this.eventTicket = eventTicket;
       this.uid = uid;
       this.created = created;
       this.modified = modified;
       this.smallUri = smallUri;
       this.normalUri = normalUri;
       this.largeUri = largeUri;
       this.visible = visible;
       this.category = category;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="id", column=@Column(name="id", nullable=false) ), 
        @AttributeOverride(name="eventTicketId", column=@Column(name="event_ticket_id", nullable=false) ) } )
    public TicketImageId getId() {
        return this.id;
    }
    
    public void setId(TicketImageId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="event_ticket_id", nullable=false, insertable=false, updatable=false)
    public EventTicket getEventTicket() {
        return this.eventTicket;
    }
    
    public void setEventTicket(EventTicket eventTicket) {
        this.eventTicket = eventTicket;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="small_uri", length=65535)
    public String getSmallUri() {
        return this.smallUri;
    }
    
    public void setSmallUri(String smallUri) {
        this.smallUri = smallUri;
    }
    
    @Column(name="normal_uri", length=65535)
    public String getNormalUri() {
        return this.normalUri;
    }
    
    public void setNormalUri(String normalUri) {
        this.normalUri = normalUri;
    }
    
    @Column(name="large_uri", length=65535)
    public String getLargeUri() {
        return this.largeUri;
    }
    
    public void setLargeUri(String largeUri) {
        this.largeUri = largeUri;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="category", length=45)
    public String getCategory() {
        return this.category;
    }
    
    public void setCategory(String category) {
        this.category = category;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(TicketImage o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(TicketImage o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
