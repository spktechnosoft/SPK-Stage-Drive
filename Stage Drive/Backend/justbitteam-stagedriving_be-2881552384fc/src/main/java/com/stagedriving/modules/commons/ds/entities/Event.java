package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Event generated by hbm
 */
@Entity
@EntityListeners(value={
Event.LastUpdateListener.class,
Event.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event")
@NamedQueries({
@NamedQuery(name = "Event.findAll", query = "SELECT n FROM Event n"),
@NamedQuery(name = "Event.findByUid", query = "SELECT n FROM Event n WHERE n.uid = :uid"),
@NamedQuery(name = "Event.findByCreated", query = "SELECT n FROM Event n WHERE n.created = :created"),
@NamedQuery(name = "Event.findByModified", query = "SELECT n FROM Event n WHERE n.modified = :modified"),
@NamedQuery(name = "Event.findByName", query = "SELECT n FROM Event n WHERE n.name = :name"),
@NamedQuery(name = "Event.findByDescription", query = "SELECT n FROM Event n WHERE n.description = :description"),
@NamedQuery(name = "Event.findByLatitude", query = "SELECT n FROM Event n WHERE n.latitude = :latitude"),
@NamedQuery(name = "Event.findByLongitude", query = "SELECT n FROM Event n WHERE n.longitude = :longitude"),
@NamedQuery(name = "Event.findByCapacity", query = "SELECT n FROM Event n WHERE n.capacity = :capacity"),
@NamedQuery(name = "Event.findByStatus", query = "SELECT n FROM Event n WHERE n.status = :status"),
@NamedQuery(name = "Event.findByCategory", query = "SELECT n FROM Event n WHERE n.category = :category"),
@NamedQuery(name = "Event.findByVisible", query = "SELECT n FROM Event n WHERE n.visible = :visible"),
@NamedQuery(name = "Event.findByCode", query = "SELECT n FROM Event n WHERE n.code = :code"),
@NamedQuery(name = "Event.findByLevel", query = "SELECT n FROM Event n WHERE n.level = :level"),
@NamedQuery(name = "Event.findByPiva", query = "SELECT n FROM Event n WHERE n.piva = :piva"),
@NamedQuery(name = "Event.findByMobile", query = "SELECT n FROM Event n WHERE n.mobile = :mobile"),
@NamedQuery(name = "Event.findByPhone", query = "SELECT n FROM Event n WHERE n.phone = :phone"),
@NamedQuery(name = "Event.findByCity", query = "SELECT n FROM Event n WHERE n.city = :city"),
@NamedQuery(name = "Event.findByTown", query = "SELECT n FROM Event n WHERE n.town = :town"),
@NamedQuery(name = "Event.findByAddress", query = "SELECT n FROM Event n WHERE n.address = :address"),
@NamedQuery(name = "Event.findByZipcode", query = "SELECT n FROM Event n WHERE n.zipcode = :zipcode"),
@NamedQuery(name = "Event.findByPass", query = "SELECT n FROM Event n WHERE n.pass = :pass"),
@NamedQuery(name = "Event.findByAccountid", query = "SELECT n FROM Event n WHERE n.accountid = :accountid"),
@NamedQuery(name = "Event.findByCountry", query = "SELECT n FROM Event n WHERE n.country = :country"),
@NamedQuery(name = "Event.findByRank", query = "SELECT n FROM Event n WHERE n.rank = :rank"),
@NamedQuery(name = "Event.findByCover", query = "SELECT n FROM Event n WHERE n.cover = :cover"),
@NamedQuery(name = "Event.findByAvatar", query = "SELECT n FROM Event n WHERE n.avatar = :avatar"),
@NamedQuery(name = "Event.findByNcheckin", query = "SELECT n FROM Event n WHERE n.ncheckin = :ncheckin"),
@NamedQuery(name = "Event.findByNlike", query = "SELECT n FROM Event n WHERE n.nlike = :nlike"),
@NamedQuery(name = "Event.findByNride", query = "SELECT n FROM Event n WHERE n.nride = :nride"),
@NamedQuery(name = "Event.findByStart", query = "SELECT n FROM Event n WHERE n.start = :start"),
@NamedQuery(name = "Event.findByFinish", query = "SELECT n FROM Event n WHERE n.finish = :finish"),
@NamedQuery(name = "Event.findByNbooking", query = "SELECT n FROM Event n WHERE n.nbooking = :nbooking"),
@NamedQuery(name = "Event.findByNbookingticket", query = "SELECT n FROM Event n WHERE n.nbookingticket = :nbookingticket"),
@NamedQuery(name = "Event.findByNcomment", query = "SELECT n FROM Event n WHERE n.ncomment = :ncomment"),
@NamedQuery(name = "Event.findByParking", query = "SELECT n FROM Event n WHERE n.parking = :parking"),
@NamedQuery(name = "Event.findByOrganizer", query = "SELECT n FROM Event n WHERE n.organizer = :organizer"),
@NamedQuery(name = "Event.findByWebsite", query = "SELECT n FROM Event n WHERE n.website = :website"),
})
@Table(name="event"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class Event  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "Event.findById";
        public static final String FINDBYUID = "Event.findByUid";
        public static final String FINDBYCREATED = "Event.findByCreated";
        public static final String FINDBYMODIFIED = "Event.findByModified";
        public static final String FINDBYNAME = "Event.findByName";
        public static final String FINDBYDESCRIPTION = "Event.findByDescription";
        public static final String FINDBYLATITUDE = "Event.findByLatitude";
        public static final String FINDBYLONGITUDE = "Event.findByLongitude";
        public static final String FINDBYCAPACITY = "Event.findByCapacity";
        public static final String FINDBYSTATUS = "Event.findByStatus";
        public static final String FINDBYCATEGORY = "Event.findByCategory";
        public static final String FINDBYVISIBLE = "Event.findByVisible";
        public static final String FINDBYCODE = "Event.findByCode";
        public static final String FINDBYLEVEL = "Event.findByLevel";
        public static final String FINDBYPIVA = "Event.findByPiva";
        public static final String FINDBYMOBILE = "Event.findByMobile";
        public static final String FINDBYPHONE = "Event.findByPhone";
        public static final String FINDBYCITY = "Event.findByCity";
        public static final String FINDBYTOWN = "Event.findByTown";
        public static final String FINDBYADDRESS = "Event.findByAddress";
        public static final String FINDBYZIPCODE = "Event.findByZipcode";
        public static final String FINDBYPASS = "Event.findByPass";
        public static final String FINDBYACCOUNTID = "Event.findByAccountid";
        public static final String FINDBYCOUNTRY = "Event.findByCountry";
        public static final String FINDBYRANK = "Event.findByRank";
        public static final String FINDBYCOVER = "Event.findByCover";
        public static final String FINDBYAVATAR = "Event.findByAvatar";
        public static final String FINDBYNCHECKIN = "Event.findByNcheckin";
        public static final String FINDBYNLIKE = "Event.findByNlike";
        public static final String FINDBYNRIDE = "Event.findByNride";
        public static final String FINDBYSTART = "Event.findByStart";
        public static final String FINDBYFINISH = "Event.findByFinish";
        public static final String FINDBYNBOOKING = "Event.findByNbooking";
        public static final String FINDBYNBOOKINGTICKET = "Event.findByNbookingticket";
        public static final String FINDBYNCOMMENT = "Event.findByNcomment";
        public static final String FINDBYPARKING = "Event.findByParking";
        public static final String FINDBYORGANIZER = "Event.findByOrganizer";
        public static final String FINDBYWEBSITE = "Event.findByWebsite";
    }




     private Integer id;
     private String uid;
     private Date created;
     private Date modified;
     private String name;
     private String description;
     private Double latitude;
     private Double longitude;
     private Integer capacity;
     private String status;
     private String category;
     private Boolean visible;
     private String code;
     private String level;
     private String piva;
     private String mobile;
     private String phone;
     private String city;
     private String town;
     private String address;
     private String zipcode;
     private String pass;
     private int accountid;
     private String country;
     private String rank;
     private String cover;
     private String avatar;
     private Integer ncheckin;
     private Integer nlike;
     private Integer nride;
     private Date start;
     private Date finish;
     private Integer nbooking;
     private Integer nbookingticket;
     private Integer ncomment;
     private String parking;
     private String organizer;
     private String website;
     private List<EventStuff> eventStuffs = new ArrayList<EventStuff>(0);
     private List<EventHasCheckin> eventHasCheckins = new ArrayList<EventHasCheckin>(0);
     private List<EventHasAction> eventHasActions = new ArrayList<EventHasAction>(0);
     private List<EventHasBuyer> eventHasBuyers = new ArrayList<EventHasBuyer>(0);
     private List<EventHasInterest> eventHasInterests = new ArrayList<EventHasInterest>(0);
     private List<EventHasCatalog> eventHasCatalogs = new ArrayList<EventHasCatalog>(0);
     private List<EventHasBooking> eventHasBookings = new ArrayList<EventHasBooking>(0);
     private List<EventImage> eventImages = new ArrayList<EventImage>(0);
     private List<EventPrize> eventPrizes = new ArrayList<EventPrize>(0);
     private List<EventHasFellowship> eventHasFellowships = new ArrayList<EventHasFellowship>(0);

    public Event() {


        //

        //
        //this.setUid(TokenUtils.generateUid());
        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

    }

	
    public Event(String uid, Date created, Date modified, String name, int accountid, Date start, String organizer) {
        this.uid = uid;
        this.created = created;
        this.modified = modified;
        this.name = name;
        this.accountid = accountid;
        this.start = start;
        this.organizer = organizer;
    }
    public Event(String uid, Date created, Date modified, String name, String description, Double latitude, Double longitude, Integer capacity, String status, String category, Boolean visible, String code, String level, String piva, String mobile, String phone, String city, String town, String address, String zipcode, String pass, int accountid, String country, String rank, String cover, String avatar, Integer ncheckin, Integer nlike, Integer nride, Date start, Date finish, Integer nbooking, Integer nbookingticket, Integer ncomment, String parking, String organizer, String website, List<EventStuff> eventStuffs, List<EventHasCheckin> eventHasCheckins, List<EventHasAction> eventHasActions, List<EventHasBuyer> eventHasBuyers, List<EventHasInterest> eventHasInterests, List<EventHasCatalog> eventHasCatalogs, List<EventHasBooking> eventHasBookings, List<EventImage> eventImages, List<EventPrize> eventPrizes, List<EventHasFellowship> eventHasFellowships) {
       this.uid = uid;
       this.created = created;
       this.modified = modified;
       this.name = name;
       this.description = description;
       this.latitude = latitude;
       this.longitude = longitude;
       this.capacity = capacity;
       this.status = status;
       this.category = category;
       this.visible = visible;
       this.code = code;
       this.level = level;
       this.piva = piva;
       this.mobile = mobile;
       this.phone = phone;
       this.city = city;
       this.town = town;
       this.address = address;
       this.zipcode = zipcode;
       this.pass = pass;
       this.accountid = accountid;
       this.country = country;
       this.rank = rank;
       this.cover = cover;
       this.avatar = avatar;
       this.ncheckin = ncheckin;
       this.nlike = nlike;
       this.nride = nride;
       this.start = start;
       this.finish = finish;
       this.nbooking = nbooking;
       this.nbookingticket = nbookingticket;
       this.ncomment = ncomment;
       this.parking = parking;
       this.organizer = organizer;
       this.website = website;
       this.eventStuffs = eventStuffs;
       this.eventHasCheckins = eventHasCheckins;
       this.eventHasActions = eventHasActions;
       this.eventHasBuyers = eventHasBuyers;
       this.eventHasInterests = eventHasInterests;
       this.eventHasCatalogs = eventHasCatalogs;
       this.eventHasBookings = eventHasBookings;
       this.eventImages = eventImages;
       this.eventPrizes = eventPrizes;
       this.eventHasFellowships = eventHasFellowships;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    @Column(name="uid", unique=true, nullable=false, length=45)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="name", nullable=false)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    @Column(name="description", length=65535)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    @Column(name="latitude", precision=22, scale=0)
    public Double getLatitude() {
        return this.latitude;
    }
    
    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }
    
    @Column(name="longitude", precision=22, scale=0)
    public Double getLongitude() {
        return this.longitude;
    }
    
    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }
    
    @Column(name="capacity")
    public Integer getCapacity() {
        return this.capacity;
    }
    
    public void setCapacity(Integer capacity) {
        this.capacity = capacity;
    }
    
    @Column(name="status", length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    @Column(name="category", length=45)
    public String getCategory() {
        return this.category;
    }
    
    public void setCategory(String category) {
        this.category = category;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="code", length=65535)
    public String getCode() {
        return this.code;
    }
    
    public void setCode(String code) {
        this.code = code;
    }
    
    @Column(name="level", length=45)
    public String getLevel() {
        return this.level;
    }
    
    public void setLevel(String level) {
        this.level = level;
    }
    
    @Column(name="piva", length=45)
    public String getPiva() {
        return this.piva;
    }
    
    public void setPiva(String piva) {
        this.piva = piva;
    }
    
    @Column(name="mobile", length=45)
    public String getMobile() {
        return this.mobile;
    }
    
    public void setMobile(String mobile) {
        this.mobile = mobile;
    }
    
    @Column(name="phone", length=45)
    public String getPhone() {
        return this.phone;
    }
    
    public void setPhone(String phone) {
        this.phone = phone;
    }
    
    @Column(name="city", length=45)
    public String getCity() {
        return this.city;
    }
    
    public void setCity(String city) {
        this.city = city;
    }
    
    @Column(name="town", length=45)
    public String getTown() {
        return this.town;
    }
    
    public void setTown(String town) {
        this.town = town;
    }
    
    @Column(name="address")
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
    
    @Column(name="zipcode", length=45)
    public String getZipcode() {
        return this.zipcode;
    }
    
    public void setZipcode(String zipcode) {
        this.zipcode = zipcode;
    }
    
    @Column(name="pass", length=65535)
    public String getPass() {
        return this.pass;
    }
    
    public void setPass(String pass) {
        this.pass = pass;
    }
    
    @Column(name="accountid", nullable=false)
    public int getAccountid() {
        return this.accountid;
    }
    
    public void setAccountid(int accountid) {
        this.accountid = accountid;
    }
    
    @Column(name="country", length=45)
    public String getCountry() {
        return this.country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    @Column(name="rank", length=45)
    public String getRank() {
        return this.rank;
    }
    
    public void setRank(String rank) {
        this.rank = rank;
    }
    
    @Column(name="cover", length=65535)
    public String getCover() {
        return this.cover;
    }
    
    public void setCover(String cover) {
        this.cover = cover;
    }
    
    @Column(name="avatar", length=65535)
    public String getAvatar() {
        return this.avatar;
    }
    
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }
    
    @Column(name="ncheckin")
    public Integer getNcheckin() {
        return this.ncheckin;
    }
    
    public void setNcheckin(Integer ncheckin) {
        this.ncheckin = ncheckin;
    }
    
    @Column(name="nlike")
    public Integer getNlike() {
        return this.nlike;
    }
    
    public void setNlike(Integer nlike) {
        this.nlike = nlike;
    }
    
    @Column(name="nride")
    public Integer getNride() {
        return this.nride;
    }
    
    public void setNride(Integer nride) {
        this.nride = nride;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="start", nullable=false, length=0)
    public Date getStart() {
        return this.start;
    }
    
    public void setStart(Date start) {
        this.start = start;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="finish", length=0)
    public Date getFinish() {
        return this.finish;
    }
    
    public void setFinish(Date finish) {
        this.finish = finish;
    }
    
    @Column(name="nbooking")
    public Integer getNbooking() {
        return this.nbooking;
    }
    
    public void setNbooking(Integer nbooking) {
        this.nbooking = nbooking;
    }
    
    @Column(name="nbookingticket")
    public Integer getNbookingticket() {
        return this.nbookingticket;
    }
    
    public void setNbookingticket(Integer nbookingticket) {
        this.nbookingticket = nbookingticket;
    }
    
    @Column(name="ncomment")
    public Integer getNcomment() {
        return this.ncomment;
    }
    
    public void setNcomment(Integer ncomment) {
        this.ncomment = ncomment;
    }
    
    @Column(name="parking", length=100)
    public String getParking() {
        return this.parking;
    }
    
    public void setParking(String parking) {
        this.parking = parking;
    }
    
    @Column(name="organizer", nullable=false)
    public String getOrganizer() {
        return this.organizer;
    }
    
    public void setOrganizer(String organizer) {
        this.organizer = organizer;
    }
    
    @Column(name="website")
    public String getWebsite() {
        return this.website;
    }
    
    public void setWebsite(String website) {
        this.website = website;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventStuffs")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventStuff> getEventStuffs() {
        return this.eventStuffs;
    }
    
    public void setEventStuffs(List<EventStuff> eventStuffs) {
        this.eventStuffs = eventStuffs;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventHasCheckins")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasCheckin> getEventHasCheckins() {
        return this.eventHasCheckins;
    }
    
    public void setEventHasCheckins(List<EventHasCheckin> eventHasCheckins) {
        this.eventHasCheckins = eventHasCheckins;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventHasActions")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasAction> getEventHasActions() {
        return this.eventHasActions;
    }
    
    public void setEventHasActions(List<EventHasAction> eventHasActions) {
        this.eventHasActions = eventHasActions;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventHasBuyers")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasBuyer> getEventHasBuyers() {
        return this.eventHasBuyers;
    }
    
    public void setEventHasBuyers(List<EventHasBuyer> eventHasBuyers) {
        this.eventHasBuyers = eventHasBuyers;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventHasInterests")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasInterest> getEventHasInterests() {
        return this.eventHasInterests;
    }
    
    public void setEventHasInterests(List<EventHasInterest> eventHasInterests) {
        this.eventHasInterests = eventHasInterests;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventHasCatalogs")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasCatalog> getEventHasCatalogs() {
        return this.eventHasCatalogs;
    }
    
    public void setEventHasCatalogs(List<EventHasCatalog> eventHasCatalogs) {
        this.eventHasCatalogs = eventHasCatalogs;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventHasBookings")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasBooking> getEventHasBookings() {
        return this.eventHasBookings;
    }
    
    public void setEventHasBookings(List<EventHasBooking> eventHasBookings) {
        this.eventHasBookings = eventHasBookings;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventImages")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventImage> getEventImages() {
        return this.eventImages;
    }
    
    public void setEventImages(List<EventImage> eventImages) {
        this.eventImages = eventImages;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventPrizes")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventPrize> getEventPrizes() {
        return this.eventPrizes;
    }
    
    public void setEventPrizes(List<EventPrize> eventPrizes) {
        this.eventPrizes = eventPrizes;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="event")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Event.EventHasFellowships")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<EventHasFellowship> getEventHasFellowships() {
        return this.eventHasFellowships;
    }
    
    public void setEventHasFellowships(List<EventHasFellowship> eventHasFellowships) {
        this.eventHasFellowships = eventHasFellowships;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(Event o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(Event o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
