package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * AccountHasGroup generated by hbm
 */
@Entity
@EntityListeners(value={
AccountHasGroup.LastUpdateListener.class,
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="AccountHasGroup")
@NamedQueries({
@NamedQuery(name = "AccountHasGroup.findAll", query = "SELECT n FROM AccountHasGroup n"),
@NamedQuery(name = "AccountHasGroup.findByAccount", query = "SELECT n FROM AccountHasGroup n WHERE n.account = :account"),
@NamedQuery(name = "AccountHasGroup.findByAccountGroup", query = "SELECT n FROM AccountHasGroup n WHERE n.accountGroup = :accountGroup"),
@NamedQuery(name = "AccountHasGroup.findByCreated", query = "SELECT n FROM AccountHasGroup n WHERE n.created = :created"),
@NamedQuery(name = "AccountHasGroup.findByModified", query = "SELECT n FROM AccountHasGroup n WHERE n.modified = :modified"),
@NamedQuery(name = "AccountHasGroup.findByVisible", query = "SELECT n FROM AccountHasGroup n WHERE n.visible = :visible"),
})
@Table(name="account_has_group"
/*
    ,catalog="stgdrv_2"
*/
)
public class AccountHasGroup  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "AccountHasGroup.findById";
        public static final String FINDBYACCOUNT = "AccountHasGroup.findByAccount";
        public static final String FINDBYACCOUNTGROUP = "AccountHasGroup.findByAccountGroup";
        public static final String FINDBYCREATED = "AccountHasGroup.findByCreated";
        public static final String FINDBYMODIFIED = "AccountHasGroup.findByModified";
        public static final String FINDBYVISIBLE = "AccountHasGroup.findByVisible";
    }




     private AccountHasGroupId id;
     private Account account;
     private AccountGroup accountGroup;
     private Date created;
     private Date modified;
     private Boolean visible;

    public AccountHasGroup() {


        //

        //

        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

    }

	
    public AccountHasGroup(AccountHasGroupId id, Account account, AccountGroup accountGroup, Date created, Date modified) {
        this.id = id;
        this.account = account;
        this.accountGroup = accountGroup;
        this.created = created;
        this.modified = modified;
    }
    public AccountHasGroup(AccountHasGroupId id, Account account, AccountGroup accountGroup, Date created, Date modified, Boolean visible) {
       this.id = id;
       this.account = account;
       this.accountGroup = accountGroup;
       this.created = created;
       this.modified = modified;
       this.visible = visible;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="groupId", column=@Column(name="group_id", nullable=false) ), 
        @AttributeOverride(name="accountId", column=@Column(name="account_id", nullable=false) ) } )
    public AccountHasGroupId getId() {
        return this.id;
    }
    
    public void setId(AccountHasGroupId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="account_id", nullable=false, insertable=false, updatable=false)
    public Account getAccount() {
        return this.account;
    }
    
    public void setAccount(Account account) {
        this.account = account;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="group_id", nullable=false, insertable=false, updatable=false)
    public AccountGroup getAccountGroup() {
        return this.accountGroup;
    }
    
    public void setAccountGroup(AccountGroup accountGroup) {
        this.accountGroup = accountGroup;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }





    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(AccountHasGroup o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
