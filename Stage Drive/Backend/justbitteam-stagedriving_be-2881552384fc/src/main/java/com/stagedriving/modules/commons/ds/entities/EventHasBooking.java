package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * EventHasBooking generated by hbm
 */
@Entity
@EntityListeners(value={
EventHasBooking.LastUpdateListener.class,
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="EventHasBooking")
@NamedQueries({
@NamedQuery(name = "EventHasBooking.findAll", query = "SELECT n FROM EventHasBooking n"),
@NamedQuery(name = "EventHasBooking.findByEvent", query = "SELECT n FROM EventHasBooking n WHERE n.event = :event"),
@NamedQuery(name = "EventHasBooking.findByBooking", query = "SELECT n FROM EventHasBooking n WHERE n.booking = :booking"),
@NamedQuery(name = "EventHasBooking.findByCreated", query = "SELECT n FROM EventHasBooking n WHERE n.created = :created"),
@NamedQuery(name = "EventHasBooking.findByModified", query = "SELECT n FROM EventHasBooking n WHERE n.modified = :modified"),
@NamedQuery(name = "EventHasBooking.findByVisible", query = "SELECT n FROM EventHasBooking n WHERE n.visible = :visible"),
@NamedQuery(name = "EventHasBooking.findByAccountid", query = "SELECT n FROM EventHasBooking n WHERE n.accountid = :accountid"),
})
@Table(name="event_has_booking"
/*
    ,catalog="stgdrv_2"
*/
)
public class EventHasBooking  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "EventHasBooking.findById";
        public static final String FINDBYEVENT = "EventHasBooking.findByEvent";
        public static final String FINDBYBOOKING = "EventHasBooking.findByBooking";
        public static final String FINDBYCREATED = "EventHasBooking.findByCreated";
        public static final String FINDBYMODIFIED = "EventHasBooking.findByModified";
        public static final String FINDBYVISIBLE = "EventHasBooking.findByVisible";
        public static final String FINDBYACCOUNTID = "EventHasBooking.findByAccountid";
    }




     private EventHasBookingId id;
     private Event event;
     private Booking booking;
     private Date created;
     private Date modified;
     private Boolean visible;
     private Integer accountid;

    public EventHasBooking() {


        //

        //

        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

    }

	
    public EventHasBooking(EventHasBookingId id, Event event, Booking booking, Date created, Date modified) {
        this.id = id;
        this.event = event;
        this.booking = booking;
        this.created = created;
        this.modified = modified;
    }
    public EventHasBooking(EventHasBookingId id, Event event, Booking booking, Date created, Date modified, Boolean visible, Integer accountid) {
       this.id = id;
       this.event = event;
       this.booking = booking;
       this.created = created;
       this.modified = modified;
       this.visible = visible;
       this.accountid = accountid;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="bookingId", column=@Column(name="booking_id", nullable=false) ), 
        @AttributeOverride(name="eventId", column=@Column(name="event_id", nullable=false) ) } )
    public EventHasBookingId getId() {
        return this.id;
    }
    
    public void setId(EventHasBookingId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="event_id", nullable=false, insertable=false, updatable=false)
    public Event getEvent() {
        return this.event;
    }
    
    public void setEvent(Event event) {
        this.event = event;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="booking_id", nullable=false, insertable=false, updatable=false)
    public Booking getBooking() {
        return this.booking;
    }
    
    public void setBooking(Booking booking) {
        this.booking = booking;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="accountid")
    public Integer getAccountid() {
        return this.accountid;
    }
    
    public void setAccountid(Integer accountid) {
        this.accountid = accountid;
    }





    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(EventHasBooking o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
