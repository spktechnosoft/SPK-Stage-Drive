package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.*;

import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Account generated by hbm
 */
@Entity
@EntityListeners(value={
Account.LastUpdateListener.class,
Account.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account")
@NamedQueries({
@NamedQuery(name = "Account.findAll", query = "SELECT n FROM Account n"),
@NamedQuery(name = "Account.findByUid", query = "SELECT n FROM Account n WHERE n.uid = :uid"),
@NamedQuery(name = "Account.findByCreated", query = "SELECT n FROM Account n WHERE n.created = :created"),
@NamedQuery(name = "Account.findByModified", query = "SELECT n FROM Account n WHERE n.modified = :modified"),
@NamedQuery(name = "Account.findByFirstname", query = "SELECT n FROM Account n WHERE n.firstname = :firstname"),
@NamedQuery(name = "Account.findByMiddlename", query = "SELECT n FROM Account n WHERE n.middlename = :middlename"),
@NamedQuery(name = "Account.findByLastname", query = "SELECT n FROM Account n WHERE n.lastname = :lastname"),
@NamedQuery(name = "Account.findByToken", query = "SELECT n FROM Account n WHERE n.token = :token"),
@NamedQuery(name = "Account.findByEmail", query = "SELECT n FROM Account n WHERE n.email = :email"),
@NamedQuery(name = "Account.findByAddress", query = "SELECT n FROM Account n WHERE n.address = :address"),
@NamedQuery(name = "Account.findByCountry", query = "SELECT n FROM Account n WHERE n.country = :country"),
@NamedQuery(name = "Account.findByTown", query = "SELECT n FROM Account n WHERE n.town = :town"),
@NamedQuery(name = "Account.findByCity", query = "SELECT n FROM Account n WHERE n.city = :city"),
@NamedQuery(name = "Account.findByZipcode", query = "SELECT n FROM Account n WHERE n.zipcode = :zipcode"),
@NamedQuery(name = "Account.findByStatus", query = "SELECT n FROM Account n WHERE n.status = :status"),
@NamedQuery(name = "Account.findByGender", query = "SELECT n FROM Account n WHERE n.gender = :gender"),
@NamedQuery(name = "Account.findByBirthday", query = "SELECT n FROM Account n WHERE n.birthday = :birthday"),
@NamedQuery(name = "Account.findByTelephone", query = "SELECT n FROM Account n WHERE n.telephone = :telephone"),
@NamedQuery(name = "Account.findByMobile", query = "SELECT n FROM Account n WHERE n.mobile = :mobile"),
@NamedQuery(name = "Account.findByPec", query = "SELECT n FROM Account n WHERE n.pec = :pec"),
@NamedQuery(name = "Account.findByNote", query = "SELECT n FROM Account n WHERE n.note = :note"),
@NamedQuery(name = "Account.findByPassword", query = "SELECT n FROM Account n WHERE n.password = :password"),
@NamedQuery(name = "Account.findByExpires", query = "SELECT n FROM Account n WHERE n.expires = :expires"),
@NamedQuery(name = "Account.findByRole", query = "SELECT n FROM Account n WHERE n.role = :role"),
@NamedQuery(name = "Account.findByUsername", query = "SELECT n FROM Account n WHERE n.username = :username"),
@NamedQuery(name = "Account.findByVisible", query = "SELECT n FROM Account n WHERE n.visible = :visible"),
@NamedQuery(name = "Account.findByActive", query = "SELECT n FROM Account n WHERE n.active = :active"),
@NamedQuery(name = "Account.findByRating", query = "SELECT n FROM Account n WHERE n.rating = :rating"),
@NamedQuery(name = "Account.findByFavStyle", query = "SELECT n FROM Account n WHERE n.favStyle = :favStyle"),
@NamedQuery(name = "Account.findByFavCategory", query = "SELECT n FROM Account n WHERE n.favCategory = :favCategory"),
@NamedQuery(name = "Account.findByCompanyVatId", query = "SELECT n FROM Account n WHERE n.companyVatId = :companyVatId"),
@NamedQuery(name = "Account.findByCompanyName", query = "SELECT n FROM Account n WHERE n.companyName = :companyName"),
@NamedQuery(name = "Account.findByCompanyAddress", query = "SELECT n FROM Account n WHERE n.companyAddress = :companyAddress"),
@NamedQuery(name = "Account.findByCompanyZipcode", query = "SELECT n FROM Account n WHERE n.companyZipcode = :companyZipcode"),
@NamedQuery(name = "Account.findByCompanyCountry", query = "SELECT n FROM Account n WHERE n.companyCountry = :companyCountry"),
@NamedQuery(name = "Account.findByCompanyCity", query = "SELECT n FROM Account n WHERE n.companyCity = :companyCity"),
@NamedQuery(name = "Account.findByCompanyRef", query = "SELECT n FROM Account n WHERE n.companyRef = :companyRef"),
})
@Table(name="account"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = {@UniqueConstraint(columnNames="email"), @UniqueConstraint(columnNames="uid"), @UniqueConstraint(columnNames="token")} 
)
public class Account  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "Account.findById";
        public static final String FINDBYUID = "Account.findByUid";
        public static final String FINDBYCREATED = "Account.findByCreated";
        public static final String FINDBYMODIFIED = "Account.findByModified";
        public static final String FINDBYFIRSTNAME = "Account.findByFirstname";
        public static final String FINDBYMIDDLENAME = "Account.findByMiddlename";
        public static final String FINDBYLASTNAME = "Account.findByLastname";
        public static final String FINDBYTOKEN = "Account.findByToken";
        public static final String FINDBYEMAIL = "Account.findByEmail";
        public static final String FINDBYADDRESS = "Account.findByAddress";
        public static final String FINDBYCOUNTRY = "Account.findByCountry";
        public static final String FINDBYTOWN = "Account.findByTown";
        public static final String FINDBYCITY = "Account.findByCity";
        public static final String FINDBYZIPCODE = "Account.findByZipcode";
        public static final String FINDBYSTATUS = "Account.findByStatus";
        public static final String FINDBYGENDER = "Account.findByGender";
        public static final String FINDBYBIRTHDAY = "Account.findByBirthday";
        public static final String FINDBYTELEPHONE = "Account.findByTelephone";
        public static final String FINDBYMOBILE = "Account.findByMobile";
        public static final String FINDBYPEC = "Account.findByPec";
        public static final String FINDBYNOTE = "Account.findByNote";
        public static final String FINDBYPASSWORD = "Account.findByPassword";
        public static final String FINDBYEXPIRES = "Account.findByExpires";
        public static final String FINDBYROLE = "Account.findByRole";
        public static final String FINDBYUSERNAME = "Account.findByUsername";
        public static final String FINDBYVISIBLE = "Account.findByVisible";
        public static final String FINDBYACTIVE = "Account.findByActive";
        public static final String FINDBYRATING = "Account.findByRating";
        public static final String FINDBYFAVSTYLE = "Account.findByFavStyle";
        public static final String FINDBYFAVCATEGORY = "Account.findByFavCategory";
        public static final String FINDBYCOMPANYVATID = "Account.findByCompanyVatId";
        public static final String FINDBYCOMPANYNAME = "Account.findByCompanyName";
        public static final String FINDBYCOMPANYADDRESS = "Account.findByCompanyAddress";
        public static final String FINDBYCOMPANYZIPCODE = "Account.findByCompanyZipcode";
        public static final String FINDBYCOMPANYCOUNTRY = "Account.findByCompanyCountry";
        public static final String FINDBYCOMPANYCITY = "Account.findByCompanyCity";
        public static final String FINDBYCOMPANYREF = "Account.findByCompanyRef";
    }




     private Integer id;
     private String uid;
     private Date created;
     private Date modified;
     private String firstname;
     private String middlename;
     private String lastname;
     private String token;
     private String email;
     private String address;
     private String country;
     private String town;
     private String city;
     private String zipcode;
     private String status;
     private String gender;
     private Date birthday;
     private String telephone;
     private String mobile;
     private String pec;
     private String note;
     private String password;
     private Date expires;
     private String role;
     private String username;
     private Boolean visible;
     private Boolean active;
     private Double rating;
     private String favStyle;
     private String favCategory;
     private String companyVatId;
     private String companyName;
     private String companyAddress;
     private String companyZipcode;
     private String companyCountry;
     private String companyCity;
     private String companyRef;
     private List<AccountReview> accountReviewsForAuthorAccountId = new ArrayList<AccountReview>(0);
     private List<AccountImage> accountImages = new ArrayList<AccountImage>(0);
     private List<AccountDevice> accountDevices = new ArrayList<AccountDevice>(0);
     private List<AccountBilling> accountBillings = new ArrayList<AccountBilling>(0);
     private List<AccountFriendship> accountFriendshipsForAccountIdFrom = new ArrayList<AccountFriendship>(0);
     private List<AccountMeta> accountMetas = new ArrayList<AccountMeta>(0);
     private List<AccountConnection> accountConnections = new ArrayList<AccountConnection>(0);
     private List<AccountFriendship> accountFriendshipsForAccountIdTo = new ArrayList<AccountFriendship>(0);
     private List<AccountVehicle> accountVehicles = new ArrayList<AccountVehicle>(0);
     private List<AccountHasGroup> accountHasGroups = new ArrayList<AccountHasGroup>(0);
     private List<AccountReview> accountReviewsForAccountId = new ArrayList<AccountReview>(0);

    public Account() {


        //

        //
        //this.setUid(TokenUtils.generateUid());
        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

        //

    }

	
    public Account(String uid, Date created, Date modified, String token, String email, String password) {
        this.uid = uid;
        this.created = created;
        this.modified = modified;
        this.token = token;
        this.email = email;
        this.password = password;
    }
    public Account(String uid, Date created, Date modified, String firstname, String middlename, String lastname, String token, String email, String address, String country, String town, String city, String zipcode, String status, String gender, Date birthday, String telephone, String mobile, String pec, String note, String password, Date expires, String role, String username, Boolean visible, Boolean active, Double rating, String favStyle, String favCategory, String companyVatId, String companyName, String companyAddress, String companyZipcode, String companyCountry, String companyCity, String companyRef, List<AccountReview> accountReviewsForAuthorAccountId, List<AccountImage> accountImages, List<AccountDevice> accountDevices, List<AccountBilling> accountBillings, List<AccountFriendship> accountFriendshipsForAccountIdFrom, List<AccountMeta> accountMetas, List<AccountConnection> accountConnections, List<AccountFriendship> accountFriendshipsForAccountIdTo, List<AccountVehicle> accountVehicles, List<AccountHasGroup> accountHasGroups, List<AccountReview> accountReviewsForAccountId) {
       this.uid = uid;
       this.created = created;
       this.modified = modified;
       this.firstname = firstname;
       this.middlename = middlename;
       this.lastname = lastname;
       this.token = token;
       this.email = email;
       this.address = address;
       this.country = country;
       this.town = town;
       this.city = city;
       this.zipcode = zipcode;
       this.status = status;
       this.gender = gender;
       this.birthday = birthday;
       this.telephone = telephone;
       this.mobile = mobile;
       this.pec = pec;
       this.note = note;
       this.password = password;
       this.expires = expires;
       this.role = role;
       this.username = username;
       this.visible = visible;
       this.active = active;
       this.rating = rating;
       this.favStyle = favStyle;
       this.favCategory = favCategory;
       this.companyVatId = companyVatId;
       this.companyName = companyName;
       this.companyAddress = companyAddress;
       this.companyZipcode = companyZipcode;
       this.companyCountry = companyCountry;
       this.companyCity = companyCity;
       this.companyRef = companyRef;
       this.accountReviewsForAuthorAccountId = accountReviewsForAuthorAccountId;
       this.accountImages = accountImages;
       this.accountDevices = accountDevices;
       this.accountBillings = accountBillings;
       this.accountFriendshipsForAccountIdFrom = accountFriendshipsForAccountIdFrom;
       this.accountMetas = accountMetas;
       this.accountConnections = accountConnections;
       this.accountFriendshipsForAccountIdTo = accountFriendshipsForAccountIdTo;
       this.accountVehicles = accountVehicles;
       this.accountHasGroups = accountHasGroups;
       this.accountReviewsForAccountId = accountReviewsForAccountId;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="firstname")
    public String getFirstname() {
        return this.firstname;
    }
    
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }
    
    @Column(name="middlename")
    public String getMiddlename() {
        return this.middlename;
    }
    
    public void setMiddlename(String middlename) {
        this.middlename = middlename;
    }
    
    @Column(name="lastname")
    public String getLastname() {
        return this.lastname;
    }
    
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }
    
    @Column(name="token", unique=true, nullable=false)
    public String getToken() {
        return this.token;
    }
    
    public void setToken(String token) {
        this.token = token;
    }
    
    @Column(name="email", unique=true, nullable=false)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    
    @Column(name="address")
    public String getAddress() {
        return this.address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
    
    @Column(name="country")
    public String getCountry() {
        return this.country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    @Column(name="town")
    public String getTown() {
        return this.town;
    }
    
    public void setTown(String town) {
        this.town = town;
    }
    
    @Column(name="city")
    public String getCity() {
        return this.city;
    }
    
    public void setCity(String city) {
        this.city = city;
    }
    
    @Column(name="zipcode")
    public String getZipcode() {
        return this.zipcode;
    }
    
    public void setZipcode(String zipcode) {
        this.zipcode = zipcode;
    }
    
    @Column(name="status", length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    
    @Column(name="gender", length=45)
    public String getGender() {
        return this.gender;
    }
    
    public void setGender(String gender) {
        this.gender = gender;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="birthday", length=0)
    public Date getBirthday() {
        return this.birthday;
    }
    
    public void setBirthday(Date birthday) {
        this.birthday = birthday;
    }
    
    @Column(name="telephone", length=45)
    public String getTelephone() {
        return this.telephone;
    }
    
    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }
    
    @Column(name="mobile", length=45)
    public String getMobile() {
        return this.mobile;
    }
    
    public void setMobile(String mobile) {
        this.mobile = mobile;
    }
    
    @Column(name="pec", length=45)
    public String getPec() {
        return this.pec;
    }
    
    public void setPec(String pec) {
        this.pec = pec;
    }
    
    @Column(name="note", length=45)
    public String getNote() {
        return this.note;
    }
    
    public void setNote(String note) {
        this.note = note;
    }
    
    @Column(name="password", nullable=false)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="expires", length=0)
    public Date getExpires() {
        return this.expires;
    }
    
    public void setExpires(Date expires) {
        this.expires = expires;
    }
    
    @Column(name="role", length=45)
    public String getRole() {
        return this.role;
    }
    
    public void setRole(String role) {
        this.role = role;
    }
    
    @Column(name="username", length=45)
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="active")
    public Boolean getActive() {
        return this.active;
    }
    
    public void setActive(Boolean active) {
        this.active = active;
    }
    
    @Column(name="rating", precision=22, scale=0)
    public Double getRating() {
        return this.rating;
    }
    
    public void setRating(Double rating) {
        this.rating = rating;
    }
    
    @Column(name="fav_style", length=45)
    public String getFavStyle() {
        return this.favStyle;
    }
    
    public void setFavStyle(String favStyle) {
        this.favStyle = favStyle;
    }
    
    @Column(name="fav_category", length=45)
    public String getFavCategory() {
        return this.favCategory;
    }
    
    public void setFavCategory(String favCategory) {
        this.favCategory = favCategory;
    }
    
    @Column(name="company_vat_id", length=45)
    public String getCompanyVatId() {
        return this.companyVatId;
    }
    
    public void setCompanyVatId(String companyVatId) {
        this.companyVatId = companyVatId;
    }
    
    @Column(name="company_name", length=100)
    public String getCompanyName() {
        return this.companyName;
    }
    
    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }
    
    @Column(name="company_address", length=200)
    public String getCompanyAddress() {
        return this.companyAddress;
    }
    
    public void setCompanyAddress(String companyAddress) {
        this.companyAddress = companyAddress;
    }
    
    @Column(name="company_zipcode", length=15)
    public String getCompanyZipcode() {
        return this.companyZipcode;
    }
    
    public void setCompanyZipcode(String companyZipcode) {
        this.companyZipcode = companyZipcode;
    }
    
    @Column(name="company_country", length=45)
    public String getCompanyCountry() {
        return this.companyCountry;
    }
    
    public void setCompanyCountry(String companyCountry) {
        this.companyCountry = companyCountry;
    }
    
    @Column(name="company_city", length=45)
    public String getCompanyCity() {
        return this.companyCity;
    }
    
    public void setCompanyCity(String companyCity) {
        this.companyCity = companyCity;
    }
    
    @Column(name="company_ref", length=155)
    public String getCompanyRef() {
        return this.companyRef;
    }
    
    public void setCompanyRef(String companyRef) {
        this.companyRef = companyRef;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="accountByAuthorAccountId")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountReviewsForAuthorAccountId")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountReview> getAccountReviewsForAuthorAccountId() {
        return this.accountReviewsForAuthorAccountId;
    }
    
    public void setAccountReviewsForAuthorAccountId(List<AccountReview> accountReviewsForAuthorAccountId) {
        this.accountReviewsForAuthorAccountId = accountReviewsForAuthorAccountId;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="account")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountImages")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountImage> getAccountImages() {
        return this.accountImages;
    }
    
    public void setAccountImages(List<AccountImage> accountImages) {
        this.accountImages = accountImages;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="account")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountDevices")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountDevice> getAccountDevices() {
        return this.accountDevices;
    }
    
    public void setAccountDevices(List<AccountDevice> accountDevices) {
        this.accountDevices = accountDevices;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="account")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountBillings")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountBilling> getAccountBillings() {
        return this.accountBillings;
    }
    
    public void setAccountBillings(List<AccountBilling> accountBillings) {
        this.accountBillings = accountBillings;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="accountByAccountIdFrom")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountFriendshipsForAccountIdFrom")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountFriendship> getAccountFriendshipsForAccountIdFrom() {
        return this.accountFriendshipsForAccountIdFrom;
    }
    
    public void setAccountFriendshipsForAccountIdFrom(List<AccountFriendship> accountFriendshipsForAccountIdFrom) {
        this.accountFriendshipsForAccountIdFrom = accountFriendshipsForAccountIdFrom;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="account")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountMetas")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountMeta> getAccountMetas() {
        return this.accountMetas;
    }
    
    public void setAccountMetas(List<AccountMeta> accountMetas) {
        this.accountMetas = accountMetas;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="account")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountConnections")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountConnection> getAccountConnections() {
        return this.accountConnections;
    }
    
    public void setAccountConnections(List<AccountConnection> accountConnections) {
        this.accountConnections = accountConnections;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="accountByAccountIdTo")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountFriendshipsForAccountIdTo")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountFriendship> getAccountFriendshipsForAccountIdTo() {
        return this.accountFriendshipsForAccountIdTo;
    }
    
    public void setAccountFriendshipsForAccountIdTo(List<AccountFriendship> accountFriendshipsForAccountIdTo) {
        this.accountFriendshipsForAccountIdTo = accountFriendshipsForAccountIdTo;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="account")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountVehicles")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountVehicle> getAccountVehicles() {
        return this.accountVehicles;
    }
    
    public void setAccountVehicles(List<AccountVehicle> accountVehicles) {
        this.accountVehicles = accountVehicles;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="account")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountHasGroups")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountHasGroup> getAccountHasGroups() {
        return this.accountHasGroups;
    }
    
    public void setAccountHasGroups(List<AccountHasGroup> accountHasGroups) {
        this.accountHasGroups = accountHasGroups;
    }
   @OneToMany(fetch=FetchType.LAZY, mappedBy="accountByAccountId")
   @Cascade(value=CascadeType.ALL)                    
   @Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="Account.AccountReviewsForAccountId")
   @Fetch(value=FetchMode.SUBSELECT)                    
    public List<AccountReview> getAccountReviewsForAccountId() {
        return this.accountReviewsForAccountId;
    }
    
    public void setAccountReviewsForAccountId(List<AccountReview> accountReviewsForAccountId) {
        this.accountReviewsForAccountId = accountReviewsForAccountId;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(Account o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(Account o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
