package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * AccountReview generated by hbm
 */
@Entity
@EntityListeners(value={
AccountReview.LastUpdateListener.class,
AccountReview.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="AccountReview")
@NamedQueries({
@NamedQuery(name = "AccountReview.findAll", query = "SELECT n FROM AccountReview n"),
@NamedQuery(name = "AccountReview.findByAccountByAccountId", query = "SELECT n FROM AccountReview n WHERE n.accountByAccountId = :accountByAccountId"),
@NamedQuery(name = "AccountReview.findByAccountByAuthorAccountId", query = "SELECT n FROM AccountReview n WHERE n.accountByAuthorAccountId = :accountByAuthorAccountId"),
@NamedQuery(name = "AccountReview.findByUid", query = "SELECT n FROM AccountReview n WHERE n.uid = :uid"),
@NamedQuery(name = "AccountReview.findByCreated", query = "SELECT n FROM AccountReview n WHERE n.created = :created"),
@NamedQuery(name = "AccountReview.findByModified", query = "SELECT n FROM AccountReview n WHERE n.modified = :modified"),
@NamedQuery(name = "AccountReview.findByTitle", query = "SELECT n FROM AccountReview n WHERE n.title = :title"),
@NamedQuery(name = "AccountReview.findByContent", query = "SELECT n FROM AccountReview n WHERE n.content = :content"),
@NamedQuery(name = "AccountReview.findByStar", query = "SELECT n FROM AccountReview n WHERE n.star = :star"),
})
@Table(name="account_review"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class AccountReview  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "AccountReview.findById";
        public static final String FINDBYACCOUNTBYACCOUNTID = "AccountReview.findByAccountByAccountId";
        public static final String FINDBYACCOUNTBYAUTHORACCOUNTID = "AccountReview.findByAccountByAuthorAccountId";
        public static final String FINDBYUID = "AccountReview.findByUid";
        public static final String FINDBYCREATED = "AccountReview.findByCreated";
        public static final String FINDBYMODIFIED = "AccountReview.findByModified";
        public static final String FINDBYTITLE = "AccountReview.findByTitle";
        public static final String FINDBYCONTENT = "AccountReview.findByContent";
        public static final String FINDBYSTAR = "AccountReview.findByStar";
    }




     private Integer id;
     private Account accountByAccountId;
     private Account accountByAuthorAccountId;
     private String uid;
     private Date created;
     private Date modified;
     private String title;
     private String content;
     private Double star;

    public AccountReview() {


        //

        //

        //

        //
        //this.setUid(TokenUtils.generateUid());
        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

    }

	
    public AccountReview(Account accountByAccountId, String uid, Date created, Date modified, String title, String content) {
        this.accountByAccountId = accountByAccountId;
        this.uid = uid;
        this.created = created;
        this.modified = modified;
        this.title = title;
        this.content = content;
    }
    public AccountReview(Account accountByAccountId, Account accountByAuthorAccountId, String uid, Date created, Date modified, String title, String content, Double star) {
       this.accountByAccountId = accountByAccountId;
       this.accountByAuthorAccountId = accountByAuthorAccountId;
       this.uid = uid;
       this.created = created;
       this.modified = modified;
       this.title = title;
       this.content = content;
       this.star = star;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="account_id", nullable=false)
    public Account getAccountByAccountId() {
        return this.accountByAccountId;
    }
    
    public void setAccountByAccountId(Account accountByAccountId) {
        this.accountByAccountId = accountByAccountId;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="author_account_id")
    public Account getAccountByAuthorAccountId() {
        return this.accountByAuthorAccountId;
    }
    
    public void setAccountByAuthorAccountId(Account accountByAuthorAccountId) {
        this.accountByAuthorAccountId = accountByAuthorAccountId;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="title", nullable=false)
    public String getTitle() {
        return this.title;
    }
    
    public void setTitle(String title) {
        this.title = title;
    }
    
    @Column(name="content", nullable=false, length=65535)
    public String getContent() {
        return this.content;
    }
    
    public void setContent(String content) {
        this.content = content;
    }
    
    @Column(name="star", precision=22, scale=0)
    public Double getStar() {
        return this.star;
    }
    
    public void setStar(Double star) {
        this.star = star;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(AccountReview o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(AccountReview o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
