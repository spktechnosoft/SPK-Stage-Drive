package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * AccountFriendship generated by hbm
 */
@Entity
@EntityListeners(value={
AccountFriendship.LastUpdateListener.class,
AccountFriendship.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="AccountFriendship")
@NamedQueries({
@NamedQuery(name = "AccountFriendship.findAll", query = "SELECT n FROM AccountFriendship n"),
@NamedQuery(name = "AccountFriendship.findByAccountByAccountIdTo", query = "SELECT n FROM AccountFriendship n WHERE n.accountByAccountIdTo = :accountByAccountIdTo"),
@NamedQuery(name = "AccountFriendship.findByAccountByAccountIdFrom", query = "SELECT n FROM AccountFriendship n WHERE n.accountByAccountIdFrom = :accountByAccountIdFrom"),
@NamedQuery(name = "AccountFriendship.findByVisible", query = "SELECT n FROM AccountFriendship n WHERE n.visible = :visible"),
@NamedQuery(name = "AccountFriendship.findByTowards", query = "SELECT n FROM AccountFriendship n WHERE n.towards = :towards"),
@NamedQuery(name = "AccountFriendship.findByUid", query = "SELECT n FROM AccountFriendship n WHERE n.uid = :uid"),
@NamedQuery(name = "AccountFriendship.findByStatus", query = "SELECT n FROM AccountFriendship n WHERE n.status = :status"),
@NamedQuery(name = "AccountFriendship.findByCreated", query = "SELECT n FROM AccountFriendship n WHERE n.created = :created"),
@NamedQuery(name = "AccountFriendship.findByModified", query = "SELECT n FROM AccountFriendship n WHERE n.modified = :modified"),
})
@Table(name="account_friendship"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class AccountFriendship  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "AccountFriendship.findById";
        public static final String FINDBYACCOUNTBYACCOUNTIDTO = "AccountFriendship.findByAccountByAccountIdTo";
        public static final String FINDBYACCOUNTBYACCOUNTIDFROM = "AccountFriendship.findByAccountByAccountIdFrom";
        public static final String FINDBYVISIBLE = "AccountFriendship.findByVisible";
        public static final String FINDBYTOWARDS = "AccountFriendship.findByTowards";
        public static final String FINDBYUID = "AccountFriendship.findByUid";
        public static final String FINDBYSTATUS = "AccountFriendship.findByStatus";
        public static final String FINDBYCREATED = "AccountFriendship.findByCreated";
        public static final String FINDBYMODIFIED = "AccountFriendship.findByModified";
    }




     private AccountFriendshipId id;
     private Account accountByAccountIdTo;
     private Account accountByAccountIdFrom;
     private Boolean visible;
     private boolean towards;
     private String uid;
     private String status;
     private Date created;
     private Date modified;

    public AccountFriendship() {


        //

        //

        //

        //

        //

        //
        //this.setUid(TokenUtils.generateUid());
        //

        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

    }

	
    public AccountFriendship(AccountFriendshipId id, Account accountByAccountIdTo, Account accountByAccountIdFrom, boolean towards, String uid, String status, Date created, Date modified) {
        this.id = id;
        this.accountByAccountIdTo = accountByAccountIdTo;
        this.accountByAccountIdFrom = accountByAccountIdFrom;
        this.towards = towards;
        this.uid = uid;
        this.status = status;
        this.created = created;
        this.modified = modified;
    }
    public AccountFriendship(AccountFriendshipId id, Account accountByAccountIdTo, Account accountByAccountIdFrom, Boolean visible, boolean towards, String uid, String status, Date created, Date modified) {
       this.id = id;
       this.accountByAccountIdTo = accountByAccountIdTo;
       this.accountByAccountIdFrom = accountByAccountIdFrom;
       this.visible = visible;
       this.towards = towards;
       this.uid = uid;
       this.status = status;
       this.created = created;
       this.modified = modified;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="accountIdFrom", column=@Column(name="account_id_from", nullable=false) ), 
        @AttributeOverride(name="accountIdTo", column=@Column(name="account_id_to", nullable=false) ) } )
    public AccountFriendshipId getId() {
        return this.id;
    }
    
    public void setId(AccountFriendshipId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="account_id_to", nullable=false, insertable=false, updatable=false)
    public Account getAccountByAccountIdTo() {
        return this.accountByAccountIdTo;
    }
    
    public void setAccountByAccountIdTo(Account accountByAccountIdTo) {
        this.accountByAccountIdTo = accountByAccountIdTo;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="account_id_from", nullable=false, insertable=false, updatable=false)
    public Account getAccountByAccountIdFrom() {
        return this.accountByAccountIdFrom;
    }
    
    public void setAccountByAccountIdFrom(Account accountByAccountIdFrom) {
        this.accountByAccountIdFrom = accountByAccountIdFrom;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="towards", nullable=false)
    public boolean isTowards() {
        return this.towards;
    }
    
    public void setTowards(boolean towards) {
        this.towards = towards;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    
    @Column(name="status", nullable=false, length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(AccountFriendship o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(AccountFriendship o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
