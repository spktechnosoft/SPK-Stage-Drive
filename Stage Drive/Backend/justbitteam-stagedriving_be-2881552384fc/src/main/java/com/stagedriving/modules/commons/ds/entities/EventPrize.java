package com.stagedriving.modules.commons.ds.entities;
// Generated 12-giu-2020 14.48.36 by Hibernate Tools 3.4.0.CR1


import com.justbit.commons.TokenUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * EventPrize generated by hbm
 */
@Entity
@EntityListeners(value={
EventPrize.LastUpdateListener.class,
EventPrize.UidListener.class
})
@Cacheable
@Cache(usage=CacheConcurrencyStrategy.TRANSACTIONAL, region="EventPrize")
@NamedQueries({
@NamedQuery(name = "EventPrize.findAll", query = "SELECT n FROM EventPrize n"),
@NamedQuery(name = "EventPrize.findByEvent", query = "SELECT n FROM EventPrize n WHERE n.event = :event"),
@NamedQuery(name = "EventPrize.findByUid", query = "SELECT n FROM EventPrize n WHERE n.uid = :uid"),
@NamedQuery(name = "EventPrize.findByCreated", query = "SELECT n FROM EventPrize n WHERE n.created = :created"),
@NamedQuery(name = "EventPrize.findByModified", query = "SELECT n FROM EventPrize n WHERE n.modified = :modified"),
@NamedQuery(name = "EventPrize.findByCategory", query = "SELECT n FROM EventPrize n WHERE n.category = :category"),
@NamedQuery(name = "EventPrize.findByAccountid", query = "SELECT n FROM EventPrize n WHERE n.accountid = :accountid"),
@NamedQuery(name = "EventPrize.findByVisible", query = "SELECT n FROM EventPrize n WHERE n.visible = :visible"),
@NamedQuery(name = "EventPrize.findByConsumed", query = "SELECT n FROM EventPrize n WHERE n.consumed = :consumed"),
})
@Table(name="event_prize"
/*
    ,catalog="stgdrv_2"
*/
    , uniqueConstraints = @UniqueConstraint(columnNames="uid") 
)
public class EventPrize  implements java.io.Serializable {


    public class NamedQueries {
        public static final String FINDBYID = "EventPrize.findById";
        public static final String FINDBYEVENT = "EventPrize.findByEvent";
        public static final String FINDBYUID = "EventPrize.findByUid";
        public static final String FINDBYCREATED = "EventPrize.findByCreated";
        public static final String FINDBYMODIFIED = "EventPrize.findByModified";
        public static final String FINDBYCATEGORY = "EventPrize.findByCategory";
        public static final String FINDBYACCOUNTID = "EventPrize.findByAccountid";
        public static final String FINDBYVISIBLE = "EventPrize.findByVisible";
        public static final String FINDBYCONSUMED = "EventPrize.findByConsumed";
    }




     private EventPrizeId id;
     private Event event;
     private String uid;
     private Date created;
     private Date modified;
     private String category;
     private Integer accountid;
     private Boolean visible;
     private Boolean consumed;

    public EventPrize() {


        //

        //

        //
        //this.setUid(TokenUtils.generateUid());
        //
        this.setCreated(new Date());
        this.setModified(new Date());

        //

        //

        //

        //

        //

        //

    }

	
    public EventPrize(EventPrizeId id, Event event, String uid, Date created, Date modified) {
        this.id = id;
        this.event = event;
        this.uid = uid;
        this.created = created;
        this.modified = modified;
    }
    public EventPrize(EventPrizeId id, Event event, String uid, Date created, Date modified, String category, Integer accountid, Boolean visible, Boolean consumed) {
       this.id = id;
       this.event = event;
       this.uid = uid;
       this.created = created;
       this.modified = modified;
       this.category = category;
       this.accountid = accountid;
       this.visible = visible;
       this.consumed = consumed;
    }
   
     @EmbeddedId
    
    @AttributeOverrides( {
        @AttributeOverride(name="id", column=@Column(name="id", nullable=false) ), 
        @AttributeOverride(name="eventId", column=@Column(name="event_id", nullable=false) ) } )
    public EventPrizeId getId() {
        return this.id;
    }
    
    public void setId(EventPrizeId id) {
        this.id = id;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="event_id", nullable=false, insertable=false, updatable=false)
    public Event getEvent() {
        return this.event;
    }
    
    public void setEvent(Event event) {
        this.event = event;
    }
    
    @Column(name="uid", unique=true, nullable=false)
    public String getUid() {
        return this.uid;
    }
    
    public void setUid(String uid) {
        this.uid = uid;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created", nullable=false, length=0)
    public Date getCreated() {
        return this.created;
    }
    
    public void setCreated(Date created) {
        this.created = created;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modified", nullable=false, length=0)
    public Date getModified() {
        return this.modified;
    }
    
    public void setModified(Date modified) {
        this.modified = modified;
    }
    
    @Column(name="category", length=45)
    public String getCategory() {
        return this.category;
    }
    
    public void setCategory(String category) {
        this.category = category;
    }
    
    @Column(name="accountid")
    public Integer getAccountid() {
        return this.accountid;
    }
    
    public void setAccountid(Integer accountid) {
        this.accountid = accountid;
    }
    
    @Column(name="visible")
    public Boolean getVisible() {
        return this.visible;
    }
    
    public void setVisible(Boolean visible) {
        this.visible = visible;
    }
    
    @Column(name="consumed")
    public Boolean getConsumed() {
        return this.consumed;
    }
    
    public void setConsumed(Boolean consumed) {
        this.consumed = consumed;
    }




    public class UidListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setUid(EventPrize o) {
            if (o.getUid() == null) {
                o.setUid(TokenUtils.generateUid());
            }
        }
    }

    public class LastUpdateListener {
        /**
         * automatic property set before any database persistence
         */
        @PreUpdate
        @PrePersist
        public void setModified(EventPrize o) {
            if (o.getCreated() == null) {
                o.setCreated(new Date());
            }
            o.setModified(new Date());
        }
    }
}
