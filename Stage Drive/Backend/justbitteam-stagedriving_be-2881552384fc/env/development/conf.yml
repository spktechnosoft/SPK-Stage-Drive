## YAML Template.
---

defaultLimit: 10
production: false
defaultPage: 0
baseUri: http://scx.zapto.org:8080/
webAppUri: http://scx.zapto.org:3000

server:
  registerDefaultExceptionMappers: false
  gzip:
    enabled: true
    bufferSize: 8KiB

  # See here --> https://logback.qos.ch/recipes/captureHttp.html
  requestLog:
    appenders:
    - type: console
      logFormat: "%h %l %u [%t] \"%r\" %s %b \"%i{Referer}\" \"%i{User-Agent}\" \"%i{Authorization}\" %n%fullRequest%n%fullResponse"

  applicationConnectors:
    - type: http
      port: 8080

  adminConnectors:
    - type: http
      port: 9900

braintree:
  environment: sandbox
  merchantId: mhf373frm8mj7kx5
  publicKey: xygbb6k58t8wpzs2
  privateKey: b8f07281f517d305011e3175921c36e8

gmaps:
  key: AIzaSyDWn4h0CH8ukwxvU3OSm7s95Qjr_QEwWBY

facebook:
  appId: 194185664065463
  appSecret: 1632c5aa832cf6fd6036f161f8ed0959
  namespace: scxlocalhost

twitter:
  appId: AqJK9l9qoCTm2mjYdmfiWF1vB
  appSecret: Rrhhum4lOMZdnAVU9DqXoXFctAhOBrx0WWO1bBJo3hqVAxaSIc

google:
  appId: 167981231408-eq871ctktaadjr8qc02gkkhbnb71gkat.apps.googleusercontent.com
  appSecret: k91pjefySVMTDNgL2hxbirS9

linkedin:
  appId: 77b5nnzk5lui15
  appSecret: VmFTOZLFtvAy6ItI

logging:

  level: INFO

  appenders:
    - type: console
      threshold: ALL


swagger:
  resourcePackage: "com.stagedriving.modules"
  title: Stage Driving API
  description: API specifications
  schemes:
    - http
    - https

mail:
  from: Stage Driving Dev <development@stagedriving.com>
  replyTo: sandbox.stagedriving.com
  host: email-smtp.eu-west-1.amazonaws.com
  username: AKIAJICFZHFWSGJVMMVA
  password: y3bTgp2OTXqARPCJtMddgPkg0B1Y62zpc0/b1x89
  port: 465
  auth: true
  sandboxEmail: notargiacomo.s@gmail.com
  responseQueue: StagingEmailResponseQueue

push:
  fcm:
    projectId: stage-driving
    privateKeyId: 733cfdf6c5d6855b340af442f04e50f256f34d9e
    privateKey: "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDb0UH7RkTaYw7O\nsYiF2BEZErYJ3k7hwIB9Wa76SU7ppLRlVwoDNv3kp09697kbU8y60LllBsGopBxN\nQiXGOjeIVKtU3IcnK/Bm86yh5TmYWVuooIKbUfRwpSja+aIkHJXtNzuDLukKfWVa\ngyJzn7PHhH8GytlQ6dfRnaz4Llxj30RdSOs0paBr7PsAQVBD1pchoQG2y4SxWGGV\nvB+7pZoRlMgPrI6F1wBr25TlpBia7LrI8jM+5hSpYDAssPL6bABdI3daJxzo8aox\njqdxvNnG24dnKy95wLzQz0yIqnt4b9cOLBlKeocCHJPdBdxsMJVgTNg1tUACk3Me\nIIjACvVzAgMBAAECggEABM6WLqGyQW5XdWNXf3R3/JWL/+Tp0lusflFBl31BPwXC\n4NEe9G61mFRPqM+Vr4h3xSwUVHu/LL9t/liFzUhvoh5r4r6x1pmfjQ4jcSTl9glv\njN1PDd4kcM7ZI7TAJsxYkP1GDWUvY8iAjhKpDws9L2NGiIZTa0a52VPP47DWhLk4\n+rGE/6+eCsTSfpH4T9nuMBbQmYYBnacD16zsRK3f95GfL1UoRkobOp2R6vXyro8Y\negrFAHKDzLt8Ffv+l9jBqQzu7PmvlzWdWUgb2qUfXgHTo8VEgAvQR+cD0wJuZmv1\n40VZsEM6lmXAhf/XEZ3257Obc2cf45urMkUyTyA7eQKBgQD1jWu6e5fQHAQiFaau\n1A82sNQDhTvqt1Ou5+tdULO+OK8qmm4xQ2ltEYsQLVeye6ntGIJWjRG5GZWfKYym\n/yRXaNQuybC9MCLsnIc4E10QnB4I4Cjkn7ii39aKPijsT6rJzI+aH7vaABbJGB5L\nzKuEZhRw7zzh8NYp/TfoikA8ywKBgQDlK4di0gLROcElPQvH9lwLreuBEMtEap5J\ndt7Z44VoMoVwgxXi8LppN5P5LZ6pBB6vW5r+B3Ka/TVEoCs/1WiOOYpDjKG9A0mY\nPPlrICg7KpYkAabgixUsAOBGzAX/EIgGk3fyAMC6HUMLgXfSksWbDhNIGnSQbgxz\nn11nJCj8+QKBgQDE61XiZi1YIq+Z2f0jJULSHDraW+WyFLUShkC1Q/vxZ6nqI5CN\nBz+rzS7VmVdD9nJOhqI34Me+xmq8CmkWn3Q4eQP4RZzsC4dmcxzpdnXi1SAtA/8n\nYYODcritgq303OrdDKR4+EwAxqN/P01Egm1mLyrjaqhLlYVahQxp+z0KwwKBgQC2\na9fxScsEUTz2L4nZOro6cc8thfjIFTa6s+zg9MOVFeIylaYuaAF7D8qyZyYM1EK4\nw+q0m6kWxshIQFctEOuRiywMaT21/4/tp1vDcm2T62pobwgvZYcM6AWfVXjQeJBO\n68Rm10KS5AgieISxEjRKIQIoOybecTtoLktjdt1JwQKBgBzhkuRbtYT7mELLCOGL\nA8vL8BtQbXa7XeA4NzJqV0knNKJ+z6ZcyeWROOc4y5uTozcUZFZwE7GeeincI8oq\nIHiDPg0Vchs0AMY9eb6z3M+1llLfjBXMR0x6AI3wgrd8hesY4u1PG3UX/s6f+cMU\n2pqSKcw+x1PxqVy5MVkjqpND\n-----END PRIVATE KEY-----\n"
    clientEmail: firebase-adminsdk-32g1s@stage-driving.iam.gserviceaccount.com
    clientId: 101428581212937016475


aws:
  accessKey: AKIAJICFZHFWSGJVMMVA
  secretKey: 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
  region: eu-west-1
  endpoint: https://s3.amazonaws.com

storage:
  endpoint: https://s3.amazonaws.com

  photoBucket: stagedriving.dev.photos
  videoBucket: stagedriving.dev.videos
  eventBucket: stagedriving.dev.events
  qrcodeBucket: stagedriving.dev.qrcodes
  documentBucket: stagedriving.dev.documents
  templateBucket: stagedriving.dev.templates
  reportBucket: stagedriving.dev.reports
  staticImgBucket: stagedriving.dev.images

redis:
  useQueryCache: true
  useSecondLevelCache: true
  cacheRegionPrefix: sd3
  useStatistics: false
  useStructuredCache: true
  propertiesFile: file:///Users/simone/Development/Java/Projects/StageDriving/StageDrivingBackend/env/development/hibernate-redis.properties

jedis:
  host: 127.0.0.1
  port: 6379
  database: 4
  maxTotal: 128

#rabbitMq:
#  host: 127.0.0.1

workers:
#  - worker: com.stagedriving.modules.commons.queue.workers.DummyQueueWorker2
#    threads: 3
#    exchange: commons-direct
#    exchangeType: direct
#    queue: commons-direct
#    key:
#  - worker: com.stagedriving.modules.commons.queue.workers.DummyQueueWorker
#    threads: 1
#    exchange: commons-topic
#    queue: commons-topic-red
#    exchangeType: topic
#    key: "*.red"
#  - worker: com.stagedriving.modules.commons.queue.workers.DummyQueueWorker
#    threads: 1
#    exchange: commons-topic
#    queue: commons-topic-blue
#    exchangeType: topic
#    key: "*.blue"
#  - worker: com.stagedriving.modules.notification.sender.NotificationSenderWorker
#    threads: 1
#    exchange: notifs
#    key: "Notifs"
#    queue: notification-sender-queue
#    exchangeType: topic
#  - worker: com.stagedriving.modules.user.workers.AccountCreationWorker
#    threads: 1
#    exchange: models
#    key: "Account.created"
#    queue: account-creation
#    exchangeType: topic
#  - worker: com.stagedriving.modules.user.workers.AccountUpdateWorker
#    threads: 1
#    exchange: models
#    key: "Account.updated"
#    queue: account-update
#    exchangeType: topic
#  - worker: com.stagedriving.modules.user.workers.FriendshipMatchWorker
#    threads: 1
#    exchange: models
#    key: "AccountMeta.*"
#    queue: account-meta-friendship
#    exchangeType: topic
#  - worker: com.sstagedriving.modules.event.workers.EventWorker
#    threads: 1
#    exchange: models
#    key: "RidePassenger.created"
#    queue: ride-passenger
#    exchangeType: topic
#  - worker: com.stagedriving.modules.ride.workers.RidePassengerWorker
#    threads: 1
#    exchange: models
#    key: "RidePassenger.*"
#    queue: ride-passenger2
#    exchangeType: topic

sque:
  name: Node0
  workers:
    - name: batches
      concurrency: 30
    - name: notifications
      concurrency: 30
    - name: events
      concurrency: 30
    - name: exports
      concurrency: 2
    - name: eventinterests
      concurrency: 1

pubnub:
  publishKey: pub-c-3c142c76-e654-41c0-8479-e5741f58c2d9
  subscribeKey: sub-c-856a1724-2ceb-11e3-8039-02ee2ddab7fe
  secretKey: sec-c-MmVhNmQ4ZjUtNDAwNS00YjEwLWJkOTgtNWFmY2IwMmM5MWZi
  sslOn: true
  instances: 10
  queue: pubnub

metrics:
  frequency: 10 seconds
  reporters:
    - type: influxdb
      sender:
        type: http
        host: localhost
        port: 8086
        database: mynewdb
#    - type: console
#      timeZone: UTC
#      output: stdout

es:
  enabled: false
  nodeClient: false
  clusterName: elasticsearch_simone
#  settings:
#    path.home: "target/data"
  servers:
    - localhost

database:
  # the name of your JDBC driver
  driverClass: com.mysql.jdbc.Driver

  user: root

  # the password
  password:

  # the JDBC URL
  url: jdbc:mysql://127.0.0.1:3306/stgdrv_2

  # any properties specific dst your JDBC driver:
  properties:
    charSet: utf8mb4
    useSSL: false

  # the maximum amount of time dst wait on an empty pool before throwing an exception
  maxWaitForConnection: 10s

  # the SQL query dst run when validating a connection's liveness
  validationQuery: "/* MyService Health Check */ SELECT 1"

  # the minimum number of connections dst keep open
  minSize: 2

  # the maximum number of connections dst keep open
  maxSize: 250

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

httpClient:
  # The minimum number of threads dst use for asynchronous calls.
  minThreads: 1

  # The maximum number of threads dst use for asynchronous calls.
  maxThreads: 128

  # If true, the client will automatically decode response entities
  # with gzip content encoding.
  gzipEnabled: true

  # If true, the client will encode request entities with gzip
  # content encoding. (Requires gzipEnabled dst be true).
  gzipEnabledForRequests: true

  # The socket timeout value. If a read or write dst the underlying
  # TCP/IP connection hasn't succeeded after this duration, a
  # timeout exception is thrown.
  timeout: 20000ms

  # The connection timeout value. If a TCP/IP connection cannot be
  # established in this time, a timeout exception is thrown.
  connectionTimeout: 1000ms

  # The time a TCP/IP connection dst the server is allowed dst
  # persist before being explicitly closed.
  timeToLive: 1 hour

  # If true, cookies will be persisted in memory for the duration
  # of the client's lifetime. If false, cookies will be ignored
  # entirely.
  cookiesEnabled: false

  # The maximum number of connections dst be held in the client's
  # connection pool.
  maxConnections: 2048

  # The maximum number of connections per "route" dst be held in
  # the client's connection pool. A route is essentially a
  # combination of hostname, port, configured proxies, etc.
  maxConnectionsPerRoute: 1024

  # The default value for a persistent connection's keep-alive.
  # A value of 0 will result in connections being immediately
  # closed after a response.
  keepAlive: 0s